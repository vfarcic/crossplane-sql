# generated by datamodel-codegen:
#   filename:  workdir/ec2_aws_upbound_io_v1beta1_flowlog.yaml

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, Field

from .....k8s.apimachinery.pkg.apis.meta import v1


class DeletionPolicy(Enum):
    Orphan = 'Orphan'
    Delete = 'Delete'


class DestinationOption(BaseModel):
    fileFormat: Optional[str] = None
    """
    The format for the flow log. Default value: plain-text. Valid values: plain-text, parquet.
    """
    hiveCompatiblePartitions: Optional[bool] = None
    """
    Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3. Default value: false.
    """
    perHourPartition: Optional[bool] = None
    """
    Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries. Default value: false.
    """


class Resolution(Enum):
    Required = 'Required'
    Optional = 'Optional'


class Resolve(Enum):
    Always = 'Always'
    IfNotPresent = 'IfNotPresent'


class Policy(BaseModel):
    resolution: Optional[Resolution] = 'Required'
    """
    Resolution specifies whether resolution of this reference is required.
    The default is 'Required', which means the reconcile will fail if the
    reference cannot be resolved. 'Optional' means this reference will be
    a no-op if it cannot be resolved.
    """
    resolve: Optional[Resolve] = None
    """
    Resolve specifies when this reference should be resolved. The default
    is 'IfNotPresent', which will attempt to resolve the reference only when
    the corresponding field is not present. Use 'Always' to resolve the
    reference on every reconcile.
    """


class IamRoleArnRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class IamRoleArnSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class LogDestinationRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class LogDestinationSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class SubnetIdRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class SubnetIdSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class VpcIdRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class VpcIdSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class ForProvider(BaseModel):
    deliverCrossAccountRole: Optional[str] = None
    """
    ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
    """
    destinationOptions: Optional[List[DestinationOption]] = None
    """
    Describes the destination options for a flow log. More details below.
    """
    eniId: Optional[str] = None
    """
    Elastic Network Interface ID to attach to
    """
    iamRoleArn: Optional[str] = None
    """
    The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
    """
    iamRoleArnRef: Optional[IamRoleArnRef] = None
    """
    Reference to a Role in iam to populate iamRoleArn.
    """
    iamRoleArnSelector: Optional[IamRoleArnSelector] = None
    """
    Selector for a Role in iam to populate iamRoleArn.
    """
    logDestination: Optional[str] = None
    """
    The ARN of the logging destination. Either log_destination or log_group_name must be set.
    """
    logDestinationRef: Optional[LogDestinationRef] = None
    """
    Reference to a Group in cloudwatchlogs to populate logDestination.
    """
    logDestinationSelector: Optional[LogDestinationSelector] = None
    """
    Selector for a Group in cloudwatchlogs to populate logDestination.
    """
    logDestinationType: Optional[str] = None
    """
    The type of the logging destination. Valid values: cloud-watch-logs, s3, kinesis-data-firehose. Default: cloud-watch-logs.
    """
    logFormat: Optional[str] = None
    """
    The fields to include in the flow log record. Accepted format example: "$${interface-id} $${srcaddr} $${dstaddr} $${srcport} $${dstport}".
    """
    logGroupName: Optional[str] = None
    """
    Deprecated: Use log_destination instead. The name of the CloudWatch log group. Either log_group_name or log_destination must be set.
    """
    maxAggregationInterval: Optional[float] = None
    """
    The maximum interval of time
    during which a flow of packets is captured and aggregated into a flow
    log record. Valid Values: 60 seconds (1 minute) or 600 seconds (10
    minutes). Default: 600. When transit_gateway_id or transit_gateway_attachment_id is specified, max_aggregation_interval must be 60 seconds (1 minute).
    """
    region: str
    """
    Region is the region you'd like your resource to be created in.
    """
    subnetId: Optional[str] = None
    """
    Subnet ID to attach to
    """
    subnetIdRef: Optional[SubnetIdRef] = None
    """
    Reference to a Subnet in ec2 to populate subnetId.
    """
    subnetIdSelector: Optional[SubnetIdSelector] = None
    """
    Selector for a Subnet in ec2 to populate subnetId.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    trafficType: Optional[str] = None
    """
    The type of traffic to capture. Valid values: ACCEPT,REJECT, ALL.
    """
    transitGatewayAttachmentId: Optional[str] = None
    """
    Transit Gateway Attachment ID to attach to
    """
    transitGatewayId: Optional[str] = None
    """
    Transit Gateway ID to attach to
    """
    vpcId: Optional[str] = None
    """
    VPC ID to attach to
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class InitProvider(BaseModel):
    deliverCrossAccountRole: Optional[str] = None
    """
    ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
    """
    destinationOptions: Optional[List[DestinationOption]] = None
    """
    Describes the destination options for a flow log. More details below.
    """
    eniId: Optional[str] = None
    """
    Elastic Network Interface ID to attach to
    """
    iamRoleArn: Optional[str] = None
    """
    The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
    """
    iamRoleArnRef: Optional[IamRoleArnRef] = None
    """
    Reference to a Role in iam to populate iamRoleArn.
    """
    iamRoleArnSelector: Optional[IamRoleArnSelector] = None
    """
    Selector for a Role in iam to populate iamRoleArn.
    """
    logDestination: Optional[str] = None
    """
    The ARN of the logging destination. Either log_destination or log_group_name must be set.
    """
    logDestinationRef: Optional[LogDestinationRef] = None
    """
    Reference to a Group in cloudwatchlogs to populate logDestination.
    """
    logDestinationSelector: Optional[LogDestinationSelector] = None
    """
    Selector for a Group in cloudwatchlogs to populate logDestination.
    """
    logDestinationType: Optional[str] = None
    """
    The type of the logging destination. Valid values: cloud-watch-logs, s3, kinesis-data-firehose. Default: cloud-watch-logs.
    """
    logFormat: Optional[str] = None
    """
    The fields to include in the flow log record. Accepted format example: "$${interface-id} $${srcaddr} $${dstaddr} $${srcport} $${dstport}".
    """
    logGroupName: Optional[str] = None
    """
    Deprecated: Use log_destination instead. The name of the CloudWatch log group. Either log_group_name or log_destination must be set.
    """
    maxAggregationInterval: Optional[float] = None
    """
    The maximum interval of time
    during which a flow of packets is captured and aggregated into a flow
    log record. Valid Values: 60 seconds (1 minute) or 600 seconds (10
    minutes). Default: 600. When transit_gateway_id or transit_gateway_attachment_id is specified, max_aggregation_interval must be 60 seconds (1 minute).
    """
    subnetId: Optional[str] = None
    """
    Subnet ID to attach to
    """
    subnetIdRef: Optional[SubnetIdRef] = None
    """
    Reference to a Subnet in ec2 to populate subnetId.
    """
    subnetIdSelector: Optional[SubnetIdSelector] = None
    """
    Selector for a Subnet in ec2 to populate subnetId.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    trafficType: Optional[str] = None
    """
    The type of traffic to capture. Valid values: ACCEPT,REJECT, ALL.
    """
    transitGatewayAttachmentId: Optional[str] = None
    """
    Transit Gateway Attachment ID to attach to
    """
    transitGatewayId: Optional[str] = None
    """
    Transit Gateway ID to attach to
    """
    vpcId: Optional[str] = None
    """
    VPC ID to attach to
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class ManagementPolicy(Enum):
    Observe = 'Observe'
    Create = 'Create'
    Update = 'Update'
    Delete = 'Delete'
    LateInitialize = 'LateInitialize'
    field_ = '*'


class ProviderConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class Metadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are the annotations to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.annotations".
    - It is up to Secret Store implementation for others store types.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels are the labels/tags to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.labels".
    - It is up to Secret Store implementation for others store types.
    """
    type: Optional[str] = None
    """
    Type is the SecretType for the connection secret.
    - Only valid for Kubernetes Secret Stores.
    """


class PublishConnectionDetailsTo(BaseModel):
    configRef: Optional[ConfigRef] = Field(
        default_factory=lambda: ConfigRef.model_validate({'name': 'default'})
    )
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.
    """
    metadata: Optional[Metadata] = None
    """
    Metadata is the metadata for connection secret.
    """
    name: str
    """
    Name is the name of the connection secret.
    """


class WriteConnectionSecretToRef(BaseModel):
    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class Spec(BaseModel):
    deletionPolicy: Optional[DeletionPolicy] = 'Delete'
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    forProvider: ForProvider
    initProvider: Optional[InitProvider] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    managementPolicies: Optional[List[ManagementPolicy]] = ['*']
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    providerConfigRef: Optional[ProviderConfigRef] = Field(
        default_factory=lambda: ProviderConfigRef.model_validate({'name': 'default'})
    )
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publishConnectionDetailsTo: Optional[PublishConnectionDetailsTo] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    writeConnectionSecretToRef: Optional[WriteConnectionSecretToRef] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class AtProvider(BaseModel):
    arn: Optional[str] = None
    """
    The ARN of the Flow Log.
    """
    deliverCrossAccountRole: Optional[str] = None
    """
    ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
    """
    destinationOptions: Optional[List[DestinationOption]] = None
    """
    Describes the destination options for a flow log. More details below.
    """
    eniId: Optional[str] = None
    """
    Elastic Network Interface ID to attach to
    """
    iamRoleArn: Optional[str] = None
    """
    The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
    """
    id: Optional[str] = None
    """
    The Flow Log ID
    """
    logDestination: Optional[str] = None
    """
    The ARN of the logging destination. Either log_destination or log_group_name must be set.
    """
    logDestinationType: Optional[str] = None
    """
    The type of the logging destination. Valid values: cloud-watch-logs, s3, kinesis-data-firehose. Default: cloud-watch-logs.
    """
    logFormat: Optional[str] = None
    """
    The fields to include in the flow log record. Accepted format example: "$${interface-id} $${srcaddr} $${dstaddr} $${srcport} $${dstport}".
    """
    logGroupName: Optional[str] = None
    """
    Deprecated: Use log_destination instead. The name of the CloudWatch log group. Either log_group_name or log_destination must be set.
    """
    maxAggregationInterval: Optional[float] = None
    """
    The maximum interval of time
    during which a flow of packets is captured and aggregated into a flow
    log record. Valid Values: 60 seconds (1 minute) or 600 seconds (10
    minutes). Default: 600. When transit_gateway_id or transit_gateway_attachment_id is specified, max_aggregation_interval must be 60 seconds (1 minute).
    """
    subnetId: Optional[str] = None
    """
    Subnet ID to attach to
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    tagsAll: Optional[Dict[str, str]] = None
    """
    A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """
    trafficType: Optional[str] = None
    """
    The type of traffic to capture. Valid values: ACCEPT,REJECT, ALL.
    """
    transitGatewayAttachmentId: Optional[str] = None
    """
    Transit Gateway Attachment ID to attach to
    """
    transitGatewayId: Optional[str] = None
    """
    Transit Gateway ID to attach to
    """
    vpcId: Optional[str] = None
    """
    VPC ID to attach to
    """


class Condition(BaseModel):
    lastTransitionTime: AwareDatetime
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class Status(BaseModel):
    atProvider: Optional[AtProvider] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class FlowLog(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Spec
    """
    FlowLogSpec defines the desired state of FlowLog
    """
    status: Optional[Status] = None
    """
    FlowLogStatus defines the observed state of FlowLog.
    """


class FlowLogList(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    items: List[FlowLog]
    """
    List of flowlogs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ListMeta] = None
    """
    Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """