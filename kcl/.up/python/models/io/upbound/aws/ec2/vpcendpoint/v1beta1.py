# generated by datamodel-codegen:
#   filename:  workdir/ec2_aws_upbound_io_v1beta1_vpcendpoint.yaml

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, Field

from .....k8s.apimachinery.pkg.apis.meta import v1


class DeletionPolicy(Enum):
    Orphan = 'Orphan'
    Delete = 'Delete'


class DnsOption(BaseModel):
    dnsRecordIpType: Optional[str] = None
    """
    The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
    """
    privateDnsOnlyForInboundResolverEndpoint: Optional[bool] = None
    """
    Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is false. Can only be specified if private_dns_enabled is true.
    """


class Resolution(Enum):
    Required = 'Required'
    Optional = 'Optional'


class Resolve(Enum):
    Always = 'Always'
    IfNotPresent = 'IfNotPresent'


class Policy(BaseModel):
    resolution: Optional[Resolution] = 'Required'
    """
    Resolution specifies whether resolution of this reference is required.
    The default is 'Required', which means the reconcile will fail if the
    reference cannot be resolved. 'Optional' means this reference will be
    a no-op if it cannot be resolved.
    """
    resolve: Optional[Resolve] = None
    """
    Resolve specifies when this reference should be resolved. The default
    is 'IfNotPresent', which will attempt to resolve the reference only when
    the corresponding field is not present. Use 'Always' to resolve the
    reference on every reconcile.
    """


class ServiceNameRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ServiceNameSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class SubnetIdRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class SubnetIdSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class SubnetConfigurationItem(BaseModel):
    ipv4: Optional[str] = None
    """
    The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    """
    ipv6: Optional[str] = None
    """
    The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    """
    subnetId: Optional[str] = None
    """
    The ID of the VPC endpoint.
    """
    subnetIdRef: Optional[SubnetIdRef] = None
    """
    Reference to a Subnet in ec2 to populate subnetId.
    """
    subnetIdSelector: Optional[SubnetIdSelector] = None
    """
    Selector for a Subnet in ec2 to populate subnetId.
    """


class VpcIdRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class VpcIdSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class ForProvider(BaseModel):
    autoAccept: Optional[bool] = None
    """
    Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    """
    dnsOptions: Optional[List[DnsOption]] = None
    """
    The DNS options for the endpoint. See dns_options below.
    """
    ipAddressType: Optional[str] = None
    """
    The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    """
    policy: Optional[str] = None
    """
    A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    """
    privateDnsEnabled: Optional[bool] = None
    """
    Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
    Defaults to false.
    """
    region: str
    """
    Region is the region you'd like your resource to be created in.
    """
    serviceName: Optional[str] = None
    """
    The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    """
    serviceNameRef: Optional[ServiceNameRef] = None
    """
    Reference to a VPCEndpointService in ec2 to populate serviceName.
    """
    serviceNameSelector: Optional[ServiceNameSelector] = None
    """
    Selector for a VPCEndpointService in ec2 to populate serviceName.
    """
    subnetConfiguration: Optional[List[SubnetConfigurationItem]] = None
    """
    Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    vpcEndpointType: Optional[str] = None
    """
    The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    """
    vpcId: Optional[str] = None
    """
    The ID of the VPC in which the endpoint will be used.
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class InitProvider(BaseModel):
    autoAccept: Optional[bool] = None
    """
    Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    """
    dnsOptions: Optional[List[DnsOption]] = None
    """
    The DNS options for the endpoint. See dns_options below.
    """
    ipAddressType: Optional[str] = None
    """
    The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    """
    policy: Optional[str] = None
    """
    A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    """
    privateDnsEnabled: Optional[bool] = None
    """
    Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
    Defaults to false.
    """
    serviceName: Optional[str] = None
    """
    The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    """
    serviceNameRef: Optional[ServiceNameRef] = None
    """
    Reference to a VPCEndpointService in ec2 to populate serviceName.
    """
    serviceNameSelector: Optional[ServiceNameSelector] = None
    """
    Selector for a VPCEndpointService in ec2 to populate serviceName.
    """
    subnetConfiguration: Optional[List[SubnetConfigurationItem]] = None
    """
    Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    vpcEndpointType: Optional[str] = None
    """
    The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    """
    vpcId: Optional[str] = None
    """
    The ID of the VPC in which the endpoint will be used.
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class ManagementPolicy(Enum):
    Observe = 'Observe'
    Create = 'Create'
    Update = 'Update'
    Delete = 'Delete'
    LateInitialize = 'LateInitialize'
    field_ = '*'


class ProviderConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class Metadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are the annotations to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.annotations".
    - It is up to Secret Store implementation for others store types.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels are the labels/tags to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.labels".
    - It is up to Secret Store implementation for others store types.
    """
    type: Optional[str] = None
    """
    Type is the SecretType for the connection secret.
    - Only valid for Kubernetes Secret Stores.
    """


class PublishConnectionDetailsTo(BaseModel):
    configRef: Optional[ConfigRef] = Field(
        default_factory=lambda: ConfigRef.model_validate({'name': 'default'})
    )
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.
    """
    metadata: Optional[Metadata] = None
    """
    Metadata is the metadata for connection secret.
    """
    name: str
    """
    Name is the name of the connection secret.
    """


class WriteConnectionSecretToRef(BaseModel):
    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class Spec(BaseModel):
    deletionPolicy: Optional[DeletionPolicy] = 'Delete'
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    forProvider: ForProvider
    initProvider: Optional[InitProvider] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    managementPolicies: Optional[List[ManagementPolicy]] = ['*']
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    providerConfigRef: Optional[ProviderConfigRef] = Field(
        default_factory=lambda: ProviderConfigRef.model_validate({'name': 'default'})
    )
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publishConnectionDetailsTo: Optional[PublishConnectionDetailsTo] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    writeConnectionSecretToRef: Optional[WriteConnectionSecretToRef] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class DnsEntryItem(BaseModel):
    dnsName: Optional[str] = None
    """
    The DNS name.
    """
    hostedZoneId: Optional[str] = None
    """
    The ID of the private hosted zone.
    """


class SubnetConfigurationItemModel(BaseModel):
    ipv4: Optional[str] = None
    """
    The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    """
    ipv6: Optional[str] = None
    """
    The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    """
    subnetId: Optional[str] = None
    """
    The ID of the VPC endpoint.
    """


class AtProvider(BaseModel):
    arn: Optional[str] = None
    """
    The Amazon Resource Name (ARN) of the VPC endpoint.
    """
    autoAccept: Optional[bool] = None
    """
    Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    """
    cidrBlocks: Optional[List[str]] = None
    """
    The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type Gateway.
    """
    dnsEntry: Optional[List[DnsEntryItem]] = None
    """
    The DNS entries for the VPC Endpoint. Applicable for endpoints of type Interface. DNS blocks are documented below.
    """
    dnsOptions: Optional[List[DnsOption]] = None
    """
    The DNS options for the endpoint. See dns_options below.
    """
    id: Optional[str] = None
    """
    The ID of the VPC endpoint.
    """
    ipAddressType: Optional[str] = None
    """
    The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    """
    networkInterfaceIds: Optional[List[str]] = None
    """
    One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type Interface.
    """
    ownerId: Optional[str] = None
    """
    The ID of the AWS account that owns the VPC endpoint.
    """
    policy: Optional[str] = None
    """
    A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    """
    prefixListId: Optional[str] = None
    """
    The prefix list ID of the exposed AWS service. Applicable for endpoints of type Gateway.
    """
    privateDnsEnabled: Optional[bool] = None
    """
    Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
    Defaults to false.
    """
    requesterManaged: Optional[bool] = None
    """
    Whether or not the VPC Endpoint is being managed by its service - true or false.
    """
    routeTableIds: Optional[List[str]] = None
    """
    One or more route table IDs. Applicable for endpoints of type Gateway.
    """
    securityGroupIds: Optional[List[str]] = None
    """
    The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type Interface.
    If no security groups are specified, the VPC's default security group is associated with the endpoint.
    """
    serviceName: Optional[str] = None
    """
    The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    """
    state: Optional[str] = None
    """
    The state of the VPC endpoint.
    """
    subnetConfiguration: Optional[List[SubnetConfigurationItemModel]] = None
    """
    Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    """
    subnetIds: Optional[List[str]] = None
    """
    The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type GatewayLoadBalancer and Interface. Interface type endpoints cannot function without being assigned to a subnet.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    tagsAll: Optional[Dict[str, str]] = None
    """
    A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """
    vpcEndpointType: Optional[str] = None
    """
    The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    """
    vpcId: Optional[str] = None
    """
    The ID of the VPC in which the endpoint will be used.
    """


class Condition(BaseModel):
    lastTransitionTime: AwareDatetime
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class Status(BaseModel):
    atProvider: Optional[AtProvider] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class VPCEndpoint(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Spec
    """
    VPCEndpointSpec defines the desired state of VPCEndpoint
    """
    status: Optional[Status] = None
    """
    VPCEndpointStatus defines the observed state of VPCEndpoint.
    """


class VPCEndpointList(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    items: List[VPCEndpoint]
    """
    List of vpcendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ListMeta] = None
    """
    Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """