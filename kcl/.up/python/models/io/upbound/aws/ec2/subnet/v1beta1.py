# generated by datamodel-codegen:
#   filename:  workdir/ec2_aws_upbound_io_v1beta1_subnet.yaml

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, Field

from .....k8s.apimachinery.pkg.apis.meta import v1


class DeletionPolicy(Enum):
    Orphan = 'Orphan'
    Delete = 'Delete'


class Resolution(Enum):
    Required = 'Required'
    Optional = 'Optional'


class Resolve(Enum):
    Always = 'Always'
    IfNotPresent = 'IfNotPresent'


class Policy(BaseModel):
    resolution: Optional[Resolution] = 'Required'
    """
    Resolution specifies whether resolution of this reference is required.
    The default is 'Required', which means the reconcile will fail if the
    reference cannot be resolved. 'Optional' means this reference will be
    a no-op if it cannot be resolved.
    """
    resolve: Optional[Resolve] = None
    """
    Resolve specifies when this reference should be resolved. The default
    is 'IfNotPresent', which will attempt to resolve the reference only when
    the corresponding field is not present. Use 'Always' to resolve the
    reference on every reconcile.
    """


class VpcIdRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class VpcIdSelector(BaseModel):
    matchControllerRef: Optional[bool] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    matchLabels: Optional[Dict[str, str]] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class ForProvider(BaseModel):
    assignIpv6AddressOnCreation: Optional[bool] = None
    """
    Specify true to indicate
    that network interfaces created in the specified subnet should be
    assigned an IPv6 address. Default is false
    """
    availabilityZone: Optional[str] = None
    """
    AZ for the subnet.
    """
    availabilityZoneId: Optional[str] = None
    """
    AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    """
    cidrBlock: Optional[str] = None
    """
    The IPv4 CIDR block for the subnet.
    """
    customerOwnedIpv4Pool: Optional[str] = None
    """
    The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    """
    enableDns64: Optional[bool] = None
    """
    Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    """
    enableLniAtDeviceIndex: Optional[float] = None
    """
    Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    """
    enableResourceNameDnsARecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    """
    enableResourceNameDnsAaaaRecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    """
    ipv6CidrBlock: Optional[str] = None
    """
    The IPv6 network range for the subnet,
    in CIDR notation. The subnet size must use a /64 prefix length.
    """
    ipv6Native: Optional[bool] = None
    """
    Indicates whether to create an IPv6-only subnet. Default: false.
    """
    mapCustomerOwnedIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    """
    mapPublicIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate
    that instances launched into the subnet should be assigned
    a public IP address. Default is false.
    """
    outpostArn: Optional[str] = None
    """
    The Amazon Resource Name (ARN) of the Outpost.
    """
    privateDnsHostnameTypeOnLaunch: Optional[str] = None
    """
    The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    """
    region: str
    """
    Region is the region you'd like your resource to be created in.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    vpcId: Optional[str] = None
    """
    The VPC ID.
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class InitProvider(BaseModel):
    assignIpv6AddressOnCreation: Optional[bool] = None
    """
    Specify true to indicate
    that network interfaces created in the specified subnet should be
    assigned an IPv6 address. Default is false
    """
    availabilityZone: Optional[str] = None
    """
    AZ for the subnet.
    """
    availabilityZoneId: Optional[str] = None
    """
    AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    """
    cidrBlock: Optional[str] = None
    """
    The IPv4 CIDR block for the subnet.
    """
    customerOwnedIpv4Pool: Optional[str] = None
    """
    The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    """
    enableDns64: Optional[bool] = None
    """
    Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    """
    enableLniAtDeviceIndex: Optional[float] = None
    """
    Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    """
    enableResourceNameDnsARecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    """
    enableResourceNameDnsAaaaRecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    """
    ipv6CidrBlock: Optional[str] = None
    """
    The IPv6 network range for the subnet,
    in CIDR notation. The subnet size must use a /64 prefix length.
    """
    ipv6Native: Optional[bool] = None
    """
    Indicates whether to create an IPv6-only subnet. Default: false.
    """
    mapCustomerOwnedIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    """
    mapPublicIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate
    that instances launched into the subnet should be assigned
    a public IP address. Default is false.
    """
    outpostArn: Optional[str] = None
    """
    The Amazon Resource Name (ARN) of the Outpost.
    """
    privateDnsHostnameTypeOnLaunch: Optional[str] = None
    """
    The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    vpcId: Optional[str] = None
    """
    The VPC ID.
    """
    vpcIdRef: Optional[VpcIdRef] = None
    """
    Reference to a VPC in ec2 to populate vpcId.
    """
    vpcIdSelector: Optional[VpcIdSelector] = None
    """
    Selector for a VPC in ec2 to populate vpcId.
    """


class ManagementPolicy(Enum):
    Observe = 'Observe'
    Create = 'Create'
    Update = 'Update'
    Delete = 'Delete'
    LateInitialize = 'LateInitialize'
    field_ = '*'


class ProviderConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ConfigRef(BaseModel):
    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class Metadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are the annotations to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.annotations".
    - It is up to Secret Store implementation for others store types.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels are the labels/tags to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.labels".
    - It is up to Secret Store implementation for others store types.
    """
    type: Optional[str] = None
    """
    Type is the SecretType for the connection secret.
    - Only valid for Kubernetes Secret Stores.
    """


class PublishConnectionDetailsTo(BaseModel):
    configRef: Optional[ConfigRef] = Field(
        default_factory=lambda: ConfigRef.model_validate({'name': 'default'})
    )
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.
    """
    metadata: Optional[Metadata] = None
    """
    Metadata is the metadata for connection secret.
    """
    name: str
    """
    Name is the name of the connection secret.
    """


class WriteConnectionSecretToRef(BaseModel):
    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class Spec(BaseModel):
    deletionPolicy: Optional[DeletionPolicy] = 'Delete'
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    forProvider: ForProvider
    initProvider: Optional[InitProvider] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    managementPolicies: Optional[List[ManagementPolicy]] = ['*']
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    providerConfigRef: Optional[ProviderConfigRef] = Field(
        default_factory=lambda: ProviderConfigRef.model_validate({'name': 'default'})
    )
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publishConnectionDetailsTo: Optional[PublishConnectionDetailsTo] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    writeConnectionSecretToRef: Optional[WriteConnectionSecretToRef] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class AtProvider(BaseModel):
    arn: Optional[str] = None
    """
    The ARN of the subnet.
    """
    assignIpv6AddressOnCreation: Optional[bool] = None
    """
    Specify true to indicate
    that network interfaces created in the specified subnet should be
    assigned an IPv6 address. Default is false
    """
    availabilityZone: Optional[str] = None
    """
    AZ for the subnet.
    """
    availabilityZoneId: Optional[str] = None
    """
    AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    """
    cidrBlock: Optional[str] = None
    """
    The IPv4 CIDR block for the subnet.
    """
    customerOwnedIpv4Pool: Optional[str] = None
    """
    The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    """
    enableDns64: Optional[bool] = None
    """
    Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    """
    enableLniAtDeviceIndex: Optional[float] = None
    """
    Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    """
    enableResourceNameDnsARecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    """
    enableResourceNameDnsAaaaRecordOnLaunch: Optional[bool] = None
    """
    Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    """
    id: Optional[str] = None
    """
    The ID of the subnet
    """
    ipv6CidrBlock: Optional[str] = None
    """
    The IPv6 network range for the subnet,
    in CIDR notation. The subnet size must use a /64 prefix length.
    """
    ipv6CidrBlockAssociationId: Optional[str] = None
    """
    The association ID for the IPv6 CIDR block.
    """
    ipv6Native: Optional[bool] = None
    """
    Indicates whether to create an IPv6-only subnet. Default: false.
    """
    mapCustomerOwnedIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    """
    mapPublicIpOnLaunch: Optional[bool] = None
    """
    Specify true to indicate
    that instances launched into the subnet should be assigned
    a public IP address. Default is false.
    """
    outpostArn: Optional[str] = None
    """
    The Amazon Resource Name (ARN) of the Outpost.
    """
    ownerId: Optional[str] = None
    """
    The ID of the AWS account that owns the subnet.
    """
    privateDnsHostnameTypeOnLaunch: Optional[str] = None
    """
    The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    """
    tags: Optional[Dict[str, str]] = None
    """
    Key-value map of resource tags.
    """
    tagsAll: Optional[Dict[str, str]] = None
    """
    A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """
    vpcId: Optional[str] = None
    """
    The VPC ID.
    """


class Condition(BaseModel):
    lastTransitionTime: AwareDatetime
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class Status(BaseModel):
    atProvider: Optional[AtProvider] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class Subnet(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Spec
    """
    SubnetSpec defines the desired state of Subnet
    """
    status: Optional[Status] = None
    """
    SubnetStatus defines the observed state of Subnet.
    """


class SubnetList(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    items: List[Subnet]
    """
    List of subnets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ListMeta] = None
    """
    Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """