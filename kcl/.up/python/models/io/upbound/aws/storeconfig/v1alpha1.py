# generated by datamodel-codegen:
#   filename:  workdir/aws_upbound_io_v1alpha1_storeconfig.yaml

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AwareDatetime, BaseModel

from ....k8s.apimachinery.pkg.apis.meta import v1


class Env(BaseModel):
    name: str
    """
    Name is the name of an environment variable.
    """


class Fs(BaseModel):
    path: str
    """
    Path is a filesystem path.
    """


class SecretRef(BaseModel):
    key: str
    """
    The key to select.
    """
    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class Source(Enum):
    None_ = 'None'
    Secret = 'Secret'
    Environment = 'Environment'
    Filesystem = 'Filesystem'


class Auth(BaseModel):
    env: Optional[Env] = None
    """
    Env is a reference to an environment variable that contains credentials
    that must be used to connect to the provider.
    """
    fs: Optional[Fs] = None
    """
    Fs is a reference to a filesystem location that contains credentials that
    must be used to connect to the provider.
    """
    secretRef: Optional[SecretRef] = None
    """
    A SecretRef is a reference to a secret key that contains the credentials
    that must be used to connect to the provider.
    """
    source: Source
    """
    Source of the credentials.
    """


class Kubernetes(BaseModel):
    auth: Auth
    """
    Credentials used to connect to the Kubernetes API.
    """


class ConfigRef(BaseModel):
    apiVersion: str
    """
    APIVersion of the referenced config.
    """
    kind: str
    """
    Kind of the referenced config.
    """
    name: str
    """
    Name of the referenced config.
    """


class Plugin(BaseModel):
    configRef: Optional[ConfigRef] = None
    """
    ConfigRef contains store config reference info.
    """
    endpoint: Optional[str] = None
    """
    Endpoint is the endpoint of the gRPC server.
    """


class Type(Enum):
    Kubernetes = 'Kubernetes'
    Vault = 'Vault'
    Plugin = 'Plugin'


class Spec(BaseModel):
    defaultScope: str
    """
    DefaultScope used for scoping secrets for "cluster-scoped" resources.
    If store type is "Kubernetes", this would mean the default namespace to
    store connection secrets for cluster scoped resources.
    In case of "Vault", this would be used as the default parent path.
    Typically, should be set as Crossplane installation namespace.
    """
    kubernetes: Optional[Kubernetes] = None
    """
    Kubernetes configures a Kubernetes secret store.
    If the "type" is "Kubernetes" but no config provided, in cluster config
    will be used.
    """
    plugin: Optional[Plugin] = None
    """
    Plugin configures External secret store as a plugin.
    """
    type: Optional[Type] = 'Kubernetes'
    """
    Type configures which secret store to be used. Only the configuration
    block for this store will be used and others will be ignored if provided.
    Default is Kubernetes.
    """


class Condition(BaseModel):
    lastTransitionTime: AwareDatetime
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observedGeneration: Optional[int] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class Status(BaseModel):
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """


class StoreConfig(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Spec
    """
    A StoreConfigSpec defines the desired state of a ProviderConfig.
    """
    status: Optional[Status] = None
    """
    A StoreConfigStatus represents the status of a StoreConfig.
    """


class StoreConfigList(BaseModel):
    apiVersion: Optional[str] = None
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    items: List[StoreConfig]
    """
    List of storeconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
    """
    kind: Optional[str] = None
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ListMeta] = None
    """
    Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """