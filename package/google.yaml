apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: google-postgresql
  labels:
    provider: google
    db: postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - functionRef:
      name: crossplane-contrib-function-patch-and-transform
    step: patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
      resources:
      - base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: DatabaseInstance
          spec:
            forProvider:
              region: us-east1
              rootPasswordSecretRef:
                namespace: crossplane-system
                key: password
              settings:
              - availabilityType: REGIONAL
                backupConfiguration:
                - enabled: true
                  binaryLogEnabled: false
                ipConfiguration:
                - ipv4Enabled: true
                  authorizedNetworks:
                  - name: all
                    value: 0.0.0.0/0
              deletionProtection: false
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.databaseVersion
          transforms:
          - type: string
            string:
              fmt: POSTGRES_%s
              type: Format
        - fromFieldPath: spec.parameters.size
          toFieldPath: spec.forProvider.settings[0].tier
          transforms:
          - type: map
            map:
              small: db-custom-1-3840
              medium: db-custom-16-61440
              large: db-custom-64-245760
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.rootPasswordSecretRef.name
          transforms:
          - type: string
            string:
              fmt: '%s-password'
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.rootPasswordSecretRef.namespace
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.publicIpAddress
          toFieldPath: status.address
        name: sql
      - base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: User
          spec:
            deletionPolicy: Orphan
            forProvider:
              passwordSecretRef:
                key: password
              instanceSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.passwordSecretRef.name
          transforms:
          - type: string
            string:
              fmt: '%s-password'
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.passwordSecretRef.namespace
        name: user
      - name: sql-config
        base:
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: ProviderConfig
          metadata:
            name: default
          spec:
            credentials:
              source: PostgreSQLConnectionSecret
            sslMode: require
        patches:
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.connectionSecretRef.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.credentials.connectionSecretRef.namespace
        readinessChecks:
        - type: None
      - name: kubernetes
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: ProviderConfig
          spec:
            credentials:
              source: InjectedIdentity
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: '%s-sql'
              type: Format
        readinessChecks:
        - type: None
      - name: helm
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: ProviderConfig
          spec:
            credentials:
              source: InjectedIdentity
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: '%s-sql'
              type: Format
        readinessChecks:
        - type: None
      - name: sql-secret
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          spec:
            references:
            - patchesFrom:
                apiVersion: sql.gcp.upbound.io/v1beta1
                kind: User
                namespace: crossplane-system
                fieldPath: metadata.name
              toFieldPath: stringData.username
            - patchesFrom:
                apiVersion: v1
                kind: Secret
                namespace: crossplane-system
                fieldPath: data.password
              toFieldPath: data.password
            - patchesFrom:
                apiVersion: sql.gcp.upbound.io/v1beta1
                kind: DatabaseInstance
                namespace: crossplane-system
                fieldPath: status.atProvider.publicIpAddress
              toFieldPath: stringData.endpoint
            forProvider:
              manifest:
                apiVersion: v1
                kind: Secret
                metadata:
                  namespace: crossplane-system
                data:
                  port: NTQzMg==
        patches:
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: '%s-secret'
              type: Format
        - fromFieldPath: spec.id
          toFieldPath: spec.references[0].patchesFrom.name
        - fromFieldPath: spec.id
          toFieldPath: spec.references[1].patchesFrom.name
          transforms:
          - type: string
            string:
              fmt: '%s-password'
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.references[1].patchesFrom.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.references[2].patchesFrom.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
          - type: string
            string:
              fmt: '%s-sql'
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: sql-db
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ range .observed.composite.resource.spec.parameters.databases }}
          ---
          apiVersion: postgresql.sql.crossplane.io/v1alpha1
          kind: Database
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
            annotations:
              crossplane.io/external-name: {{ . }}
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}
            forProvider: {}
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: schema
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ range .observed.composite.resource.spec.parameters.schemas }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}-sql
            forProvider:
              manifest:
                apiVersion: db.atlasgo.io/v1alpha1
                kind: AtlasSchema
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}-{{ .database }}
                  namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}
                toFieldPath: spec.credentials.connectionSecretRef.namespace
                spec:
                  credentials:
                    scheme: postgres
                    hostFrom:
                      secretKeyRef:
                        key: endpoint
                        name: {{ $.observed.composite.resource.spec.id }}
                    port: 5432
                    userFrom:
                      secretKeyRef:
                        key: username
                        name: {{ $.observed.composite.resource.spec.id }}
                    passwordFrom:
                      secretKeyRef:
                        key: password
                        name: {{ $.observed.composite.resource.spec.id }}
                    database: {{ .database }}
                    parameters:
                      sslmode: disable
                  schema: 
                    sql: "{{ .sql }}"
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: secret-pull
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ if and .observed.composite.resource.spec.parameters.secrets.storeName .observed.composite.resource.spec.parameters.secrets.pullRootPasswordKey }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-secret-pull
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-secret-pull
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}-sql
            forProvider:
              manifest:
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}-password
                  namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                spec:
                  dataFrom:
                  - extract:
                      conversionStrategy: Default
                      decodingStrategy: None
                      key: {{ $.observed.composite.resource.spec.parameters.secrets.pullRootPasswordKey }}
                      metadataPolicy: None
                  refreshInterval: 1h
                  secretStoreRef:
                    kind: ClusterSecretStore
                    name: {{ $.observed.composite.resource.spec.parameters.secrets.storeName }}
                  target:
                    creationPolicy: Owner
                    deletionPolicy: Retain
                    name: {{ $.observed.composite.resource.spec.id }}-password
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: secret-push-store
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '[['
        right: ']]'
      inline:
        template: |-
          [[ if and .observed.composite.resource.spec.parameters.secrets.storeName .observed.composite.resource.spec.parameters.secrets.pushToStore ]]
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: [[ $.observed.composite.resource.spec.id ]]-secret-push-store
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: [[ $.observed.composite.resource.spec.id ]]-secret-push-store
          spec:
            providerConfigRef:
              name: [[ $.observed.composite.resource.spec.id ]]-sql
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1alpha1
                kind: PushSecret
                metadata:
                  name: [[ $.observed.composite.resource.spec.id ]]
                  namespace: [[ $.observed.composite.resource.spec.claimRef.namespace ]]
                spec:
                  deletionPolicy: Delete
                  refreshInterval: 1h
                  secretStoreRefs:
                    - name: [[ $.observed.composite.resource.spec.parameters.secrets.storeName ]]
                      kind: ClusterSecretStore
                  selector:
                    secret:
                      name: [[ $.observed.composite.resource.spec.id ]]
                  template:
                    data:
                      endpoint: |
                        {
                          "endpoint": "{{ .endpoint }}",
                          "port": "{{ .port }}",
                          "username": "{{ .username }}",
                          "password": "{{ .password }}"[[ range .observed.composite.resource.spec.parameters.databases ]],
                          "conn-[[ . ]]": "host={{ .endpoint }} user={{ .username }} password={{ .password }} port={{ .port }} connect_timeout=10 database=[[ . ]]"[[ end ]]
                        }
                  data:
                    - match:
                        secretKey: endpoint
                        remoteRef:
                          remoteKey: [[ $.observed.composite.resource.spec.id ]]
          [[ end ]]
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: secret-pull-cluster
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ if and .observed.composite.resource.spec.parameters.secrets.storeName .observed.composite.resource.spec.parameters.secrets.pullToCluster }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-secret-pull-cluster
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-secret-pull-cluster
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.parameters.secrets.pullToCluster }}
            forProvider:
              manifest:
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}
                  namespace: {{ $.observed.composite.resource.spec.parameters.secrets.pullToClusterNamespace }}
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                spec:
                  dataFrom:
                  - extract:
                      conversionStrategy: Default
                      decodingStrategy: None
                      key: {{ $.observed.composite.resource.spec.id }}
                      metadataPolicy: None
                  refreshInterval: 1h
                  secretStoreRef:
                    kind: ClusterSecretStore
                    name: {{ $.observed.composite.resource.spec.parameters.secrets.storeName }}
                  target:
                    creationPolicy: Owner
                    deletionPolicy: Retain
                    name: {{ $.observed.composite.resource.spec.id }}
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: dapr-components
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ if and .observed.composite.resource.spec.parameters.secrets.daprComponents .observed.composite.resource.spec.parameters.secrets.pullToCluster }}
          {{ range .observed.composite.resource.spec.parameters.databases }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.parameters.secrets.pullToCluster }}
            forProvider:
              manifest:
                apiVersion: dapr.io/v1alpha1
                kind: Component
                metadata:
                  name: {{ $.observed.composite.resource.spec.id }}-{{ . }}
                  namespace: {{ $.observed.composite.resource.spec.parameters.secrets.pullToClusterNamespace }}
                spec:
                  type: state.postgresql
                  version: v1
                  metadata:
                    - name: connectionString
                      secretKeyRef:
                        name: {{ $.observed.composite.resource.spec.id }}
                        key: conn-{{ . }}
          {{ end }}
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: dynatrace
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: '{{'
        right: '}}'
      inline:
        template: |-
          {{ if .observed.composite.resource.spec.parameters.dynatraceDashboard.enabled }}
          ---
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            name: {{ .observed.composite.resource.spec.id }}-dynatrace-dashboard
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.id }}-dynatrace-dashboard
          spec:
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.parameters.dynatraceDashboard.cluster }}
            forProvider:
              chart:
                name: kubernetes-workload
                repository: https://katharinasick.github.io/crossplane-observability-demo-dynatrace
                version: "0.1.5"
              values:
                oauthCredentialsSecretName: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.oathCredentialsSecretName }}
                dashboard:
                  enabled: true
                alerting:
                  enabled: true
                  slackChannel: "#{{ .observed.composite.resource.spec.parameters.dynatraceDashboard.slackChannel }}"
                workloadName: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.appDeploymentName }}
                cluster: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.cluster }}
                namespace: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.appNamespace }}
                crossplaneTerraformProvider:
                  connectionSecretRef:
                    name: dynatrace-terraform-creds
                  namespace: crossplane-system
                  key: credentials
                databaseAddress: {{ .observed.composite.resource.status.address }}
              namespace: dynatrace
            providerConfigRef:
              name: {{ .observed.composite.resource.spec.id }}-sql
            rollbackLimit: 3
          {{ end }}
  - functionRef:
      name: crossplane-contrib-function-auto-ready
    step: automatically-detect-ready-composed-resources
