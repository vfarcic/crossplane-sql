apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    db: postgresql
    provider: google
  name: google-postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - step: google
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        source: "oxr = option(\"params\").oxr\nocds = option(\"params\").ocds\n\n_metadata = lambda resourceName: str -> any {\n    {\n        name = oxr.spec.id\n        annotations = {\n            # \"crossplane.io/external-name\" = oxr.spec.id\n            \"krm.kcl.dev/composition-resource-name\" = resourceName\n        }\n    }\n}\n\nschema providerConfig:\n    _apiVersion: str\n    _suffix: str\n    apiVersion = _apiVersion\n    kind = \"ProviderConfig\"\n    metadata = {\n        name = oxr.spec.id + \"-sql\"\n        annotations = {\n            \"krm.kcl.dev/ready\": \"True\"\n            \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-provider-config-\" + _suffix\n        }\n    }\n    spec = {\n        credentials.source = \"InjectedIdentity\"\n    }\n\n_items = [\nproviderConfig {\n    _apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n    _suffix = \"kubernetes\"\n},\nproviderConfig {\n    _apiVersion = \"helm.crossplane.io/v1beta1\"\n    _suffix = \"helm\"\n}, {\n    apiVersion = \"sql.gcp.upbound.io/v1beta1\"\n    kind = \"DatabaseInstance\"\n    metadata = _metadata(\"sql\")\n    spec = {\n        forProvider = {\n            region = \"us-east1\"\n            databaseVersion = \"POSTGRES_\" + oxr.spec.parameters.version\n            rootPasswordSecretRef = {\n                name = oxr.spec.id + \"-password\"\n                namespace = oxr.spec.claimRef.namespace\n                key = \"password\"\n            }\n            settings = [{\n                if oxr.spec.parameters.size == \"small\":\n                    tier = \"db-custom-1-3840\"\n                elif oxr.spec.parameters.size == \"medium\":\n                    tier = \"db-custom-16-61440\"\n                else:\n                    tier = \"db-custom-64-245760\"\n                availabilityType = \"REGIONAL\"\n                backupConfiguration = [{\n                    enabled = True\n                    binaryLogEnabled = False\n                }]\n                ipConfiguration = [{\n                    ipv4Enabled = True\n                    authorizedNetworks = [{\n                        name = \"all\"\n                        value = \"0.0.0.0/0\"\n                    }]\n                }]\n            }]\n            deletionProtection = False\n        }\n    }\n}, {\n    apiVersion = \"postgresql.sql.crossplane.io/v1alpha1\"\n    kind = \"ProviderConfig\"\n    metadata = {\n        name = oxr.spec.id\n        annotations = {\n            \"krm.kcl.dev/ready\": \"True\"\n            \"krm.kcl.dev/composition-resource-name\" = \"sql-config\"\n            \"crossplane.io/external-name\" = \"default\"\n        }\n    }\n    spec = {\n        credentials = {\n          source = \"PostgreSQLConnectionSecret\"\n          connectionSecretRef = {\n            name = oxr.spec.id\n            namespace = oxr.spec.claimRef.namespace\n          }\n        }\n        sslMode = \"require\"\n    }\n}, {\n    apiVersion = \"sql.gcp.upbound.io/v1beta1\"\n    kind = \"User\"\n    metadata = _metadata(\"user\")\n    spec = {\n        deletionPolicy = \"Orphan\"\n        forProvider = {\n          passwordSecretRef = {\n             key = \"password\"\n             name = oxr.spec.id + \"-password\"\n            namespace = oxr.spec.claimRef.namespace\n          }\n          instanceSelector.matchControllerRef = True\n        }\n    }\n}, {\n    apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n    kind = \"Object\"\n    metadata = {\n        name = oxr.spec.id + \"-secret\"\n        annotations = {\n            \"krm.kcl.dev/ready\": \"True\"\n            \"krm.kcl.dev/composition-resource-name\" = \"sql-secret\"\n        }\n    }\n    spec = {\n        references = [{\n            patchesFrom = {\n                apiVersion = \"sql.gcp.upbound.io/v1beta1\"\n                kind = \"User\"\n                name = oxr.spec.id\n                namespace = \"crossplane-system\"\n                fieldPath = \"metadata.name\"\n            }\n            toFieldPath = \"stringData.username\"\n        }, {\n            patchesFrom = {\n                apiVersion = \"v1\"\n                kind = \"Secret\"\n                name = oxr.spec.id + \"-password\"\n                namespace = oxr.spec.claimRef.namespace\n                fieldPath = \"data.password\"\n            }\n            toFieldPath = \"data.password\"\n        }, {\n            patchesFrom = {\n                apiVersion = \"sql.gcp.upbound.io/v1beta1\"\n                kind = \"DatabaseInstance\"\n                name = oxr.spec.id\n                namespace = \"crossplane-system\"\n                fieldPath = \"status.atProvider.publicIpAddress\"\n            }\n            toFieldPath = \"stringData.endpoint\"\n        }]\n        forProvider.manifest = {\n            apiVersion = \"v1\"\n            kind = \"Secret\"\n            metadata = {\n                name = oxr.spec.id\n                namespace = oxr.spec.claimRef.namespace\n            }\n            data.port = \"NTQzMg==\"\n        }\n        providerConfigRef.name = oxr.spec.id + \"-sql\"\n    }\n#   - functionRef:\n#       name: crossplane-contrib-function-go-templating\n#     step: schema\n#     input:\n#       apiVersion: gotemplating.fn.crossplane.io/v1beta1\n#       kind: GoTemplate\n#       source: Inline\n#       delims:\n#         left: '{{'\n#         right: '}}'\n#       inline:\n#         template: |-\n#           {{ range .observed.composite.resource.spec.parameters.schemas }}\n#           ---\n#           apiVersion: kubernetes.crossplane.io/v1alpha2\n#           kind: Object\n#           metadata:\n#             name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}\n#             annotations:\n#               gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-schema-{{ .database }}\n#           spec:\n#             providerConfigRef:\n#               name: {{ $.observed.composite.resource.spec.id }}-sql\n#             forProvider:\n#               manifest:\n#                 apiVersion: db.atlasgo.io/v1alpha1\n#                 kind: AtlasSchema\n#                 metadata:\n#                   name: {{ $.observed.composite.resource.spec.id }}-{{ .database }}\n#                   namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}\n#                 toFieldPath: spec.credentials.connectionSecretRef.namespace\n#                 spec:\n#                   credentials:\n#                     scheme: postgres\n#                     hostFrom:\n#                       secretKeyRef:\n#                         key: endpoint\n#                         name: {{ $.observed.composite.resource.spec.id }}\n#                     port: 5432\n#                     userFrom:\n#                       secretKeyRef:\n#                         key: username\n#                         name: {{ $.observed.composite.resource.spec.id }}\n#                     passwordFrom:\n#                       secretKeyRef:\n#                         key: password\n#                         name: {{ $.observed.composite.resource.spec.id }}\n#                     database: {{ .database }}\n#                     parameters:\n#                       sslmode: disable\n#                   schema: \n#                     sql: \"{{ .sql }}\"\n#           {{ end }}\n#   - functionRef:\n#       name: crossplane-contrib-function-go-templating\n#     step: secret-pull-cluster\n#     input:\n#       apiVersion: gotemplating.fn.crossplane.io/v1beta1\n#       kind: GoTemplate\n#       source: Inline\n#       delims:\n#         left: '{{'\n#         right: '}}'\n#       inline:\n#         template: |-\n#           {{ if and .observed.composite.resource.spec.parameters.secrets.storeName .observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n#           ---\n#           apiVersion: kubernetes.crossplane.io/v1alpha2\n#           kind: Object\n#           metadata:\n#             name: {{ $.observed.composite.resource.spec.id }}-secret-pull-cluster\n#             annotations:\n#               gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-secret-pull-cluster\n#           spec:\n#             providerConfigRef:\n#               name: {{ $.observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n#             forProvider:\n#               manifest:\n#                 metadata:\n#                   name: {{ $.observed.composite.resource.spec.id }}\n#                   namespace: {{ $.observed.composite.resource.spec.parameters.secrets.pullToClusterNamespace }}\n#                 apiVersion: external-secrets.io/v1beta1\n#                 kind: ExternalSecret\n#                 spec:\n#                   dataFrom:\n#                   - extract:\n#                       conversionStrategy: Default\n#                       decodingStrategy: None\n#                       key: {{ $.observed.composite.resource.spec.id }}\n#                       metadataPolicy: None\n#                   refreshInterval: 1h\n#                   secretStoreRef:\n#                     kind: ClusterSecretStore\n#                     name: {{ $.observed.composite.resource.spec.parameters.secrets.storeName }}\n#                   target:\n#                     creationPolicy: Owner\n#                     deletionPolicy: Retain\n#                     name: {{ $.observed.composite.resource.spec.id }}\n#           {{ end }}\n#   - functionRef:\n#       name: crossplane-contrib-function-go-templating\n#     step: dapr-components\n#     input:\n#       apiVersion: gotemplating.fn.crossplane.io/v1beta1\n#       kind: GoTemplate\n#       source: Inline\n#       delims:\n#         left: '{{'\n#         right: '}}'\n#       inline:\n#         template: |-\n#           {{ if and .observed.composite.resource.spec.parameters.secrets.daprComponents .observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n#           {{ range .observed.composite.resource.spec.parameters.databases }}\n#           ---\n#           apiVersion: kubernetes.crossplane.io/v1alpha2\n#           kind: Object\n#           metadata:\n#             name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}\n#             annotations:\n#               gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}\n#           spec:\n#             providerConfigRef:\n#               name: {{ $.observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n#             forProvider:\n#               manifest:\n#                 apiVersion: dapr.io/v1alpha1\n#                 kind: Component\n#                 metadata:\n#                   name: {{ $.observed.composite.resource.spec.id }}-{{ . }}\n#                   namespace: {{ $.observed.composite.resource.spec.parameters.secrets.pullToClusterNamespace }}\n#                 spec:\n#                   type: state.postgresql\n#                   version: v1\n#                   metadata:\n#                     - name: connectionString\n#                       secretKeyRef:\n#                         name: {{ $.observed.composite.resource.spec.id }}\n#                         key: conn-{{ . }}\n#           {{ end }}\n#           {{ end }}\n#   - functionRef:\n#       name: crossplane-contrib-function-go-templating\n#     step: dynatrace\n#     input:\n#       apiVersion: gotemplating.fn.crossplane.io/v1beta1\n#       kind: GoTemplate\n#       source: Inline\n#       delims:\n#         left: '{{'\n#         right: '}}'\n#       inline:\n#         template: |-\n#           {{ if .observed.composite.resource.spec.parameters.dynatraceDashboard.enabled }}\n#           ---\n#           apiVersion: helm.crossplane.io/v1beta1\n#           kind: Release\n#           metadata:\n#             name: {{ .observed.composite.resource.spec.id }}-dynatrace-dashboard\n#             annotations:\n#               gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.id }}-dynatrace-dashboard\n#           spec:\n#             providerConfigRef:\n#               name: {{ $.observed.composite.resource.spec.parameters.dynatraceDashboard.cluster }}\n#             forProvider:\n#               chart:\n#                 name: kubernetes-workload\n#                 repository: https://katharinasick.github.io/crossplane-observability-demo-dynatrace\n#                 version: \"0.1.5\"\n#               values:\n#                 oauthCredentialsSecretName: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.oathCredentialsSecretName }}\n#                 dashboard:\n#                   enabled: true\n#                 alerting:\n#                   enabled: true\n#                   slackChannel: \"#{{ .observed.composite.resource.spec.parameters.dynatraceDashboard.slackChannel }}\"\n#                 workloadName: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.appDeploymentName }}\n#                 cluster: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.cluster }}\n#                 namespace: {{ .observed.composite.resource.spec.parameters.dynatraceDashboard.appNamespace }}\n#                 crossplaneTerraformProvider:\n#                   connectionSecretRef:\n#                     name: dynatrace-terraform-creds\n#                   namespace: crossplane-system\n#                   key: credentials\n#                 databaseAddress: {{ .observed.composite.resource.status.address }}\n#               namespace: dynatrace\n#             providerConfigRef:\n#               name: {{ .observed.composite.resource.spec.id }}-sql\n#             rollbackLimit: 3\n#           {{ end }}\n}, {\n    **oxr\n    if oxr.spec.id + \"-sql\" in ocds:\n        status.address = ocds[oxr.spec.id + \"-sql\"].Resource.status.atProvider.publicIpAddress\n}]\n\nif oxr.spec.parameters?.databases:\n    _items += [{\n        apiVersion = \"postgresql.sql.crossplane.io/v1alpha1\"\n        kind = \"Database\"\n        metadata = {\n            name = oxr.spec.id + \"-\" + _database\n            annotations = {\n                \"crossplane.io/external-name\" = _database\n                \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-\" + _database\n            }\n        }\n        spec = {\n            providerConfigRef.name = oxr.spec.id\n            forProvider = {}\n        }\n    } for _database in oxr.spec.parameters.databases ]\n\nif oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pullRootPasswordKey:\n    _items += [{\n        apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n        kind = \"Object\"\n        metadata = {\n            name = oxr.spec.id + \"-secret-pull\"\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-secret-pull\"\n            }\n        }\n        spec = {\n            providerConfigRef.name = oxr.spec.id + \"-sql\"\n            forProvider.manifest = {\n                apiVersion = \"external-secrets.io/v1beta1\"\n                kind = \"ExternalSecret\"\n                metadata = {\n                    name = oxr.spec.id + \"-password\"\n                    namespace: oxr.spec.claimRef.namespace\n                }\n                spec = {\n                    dataFrom = [{\n                        extract = {\n                            conversionStrategy = \"Default\"\n                            decodingStrategy = \"None\"\n                            key = oxr.spec.parameters.secrets.pullRootPasswordKey\n                            metadataPolicy = \"None\"\n                        }\n                    }]\n                    refreshInterval = \"1h\"\n                    secretStoreRef = {\n                        kind = \"ClusterSecretStore\"\n                        name = oxr.spec.parameters.secrets.storeName\n                    }\n                    target = {\n                        creationPolicy = \"Owner\"\n                        deletionPolicy = \"Retain\"\n                        name = oxr.spec.id + \"-password\"\n                    }\n                }\n            }\n        }\n    }]\n\nif oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pushToStore:\n    _endpoint = \"\"\"\\\n{\n  \"endpoint\": \"{{ .endpoint }}\",\n  \"port\": \"{{ .port }}\",\n  \"username\": \"{{ .username }}\",\n  \"password\": \"{{ .password }}\",\n  \"\"\"\n    _conns = [ \"\\\"conn-{}\\\": \\\"host=[[ .endpoint ]] user=[[ .username ]] password=[[ .password ]] port=[[ .port ]] connect_timeout=10 database={}\\\"\".format(_db, _db).replace(\"[[\", \"{{\").replace(\"]]\", \"}}\") for _db in oxr.spec.parameters.databases ]\n    _endpoint += \",\\n  \".join(_conns)\n    _endpoint += \"\"\"\n}\n\"\"\"\n    _items += [{\n        apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n        kind = \"Object\"\n        metadata = {\n            name = oxr.spec.id + \"-secret-push-store\"\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-secret-push-store\"\n            }\n        }\n        spec = {\n            providerConfigRef.name = oxr.spec.id + \"-sql\"\n            forProvider.manifest = {\n                apiVersion = \"external-secrets.io/v1alpha1\"\n                kind = \"PushSecret\"\n                metadata = {\n                    name = oxr.spec.id\n                    namespace: oxr.spec.claimRef.namespace\n                }\n                spec = {\n                    deletionPolicy = \"Delete\"\n                    refreshInterval = \"1h\"\n                    secretStoreRefs = [{\n                        name = oxr.spec.parameters.secrets.storeName\n                        kind = \"ClusterSecretStore\"\n                    }]\n                    selector.secret.name = oxr.spec.id\n                    template.data.endpoint = _endpoint\n                    data = [{\n                        match = {\n                            secretKey = \"endpoint\"\n                            remoteRef.remoteKey = oxr.spec.id\n                        }\n                    }]\n                }\n            }\n        }\n    }]\n\nitems = _items\n"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
