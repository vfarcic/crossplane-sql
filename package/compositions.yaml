apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    db: postgresql
    provider: google
  name: google-postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkit.live/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - step: main
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: |
          oxr = option("params").oxr
          ocds = option("params").ocds

          _region = "us-east1"
          if oxr.spec?.parameters?.region:
              _region = oxr.spec.parameters.region

          _metadata = lambda resourceName: str -> any {
              {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/composition-resource-name" = resourceName
                  }
              }
          }

          _items = [{
              apiVersion = "sql.gcp.upbound.io/v1beta1"
              kind = "DatabaseInstance"
              metadata = _metadata("databaseinstance")
              spec = {
                  forProvider = {
                      region = _region
                      databaseVersion = "POSTGRES_" + oxr.spec.parameters.version
                      rootPasswordSecretRef = {
                          name = oxr.spec.id + "-password"
                          namespace = oxr.spec.claimRef.namespace
                          key = "password"
                      }
                      settings = [{
                          if oxr.spec.parameters.size == "small":
                              tier = "db-custom-1-3840"
                          elif oxr.spec.parameters.size == "medium":
                              tier = "db-custom-16-61440"
                          else:
                              tier = "db-custom-64-245760"
                          availabilityType = "REGIONAL"
                          backupConfiguration = [{
                              enabled = True
                              binaryLogEnabled = False
                          }]
                          ipConfiguration = [{
                              ipv4Enabled = True
                              authorizedNetworks = [{
                                  name = "all"
                                  value = "0.0.0.0/0"
                              }]
                          }]
                      }]
                      deletionProtection = False
                  }
              }
          }, {
              apiVersion = "sql.gcp.upbound.io/v1beta1"
              kind = "User"
              metadata = _metadata("user")
              spec = {
                  deletionPolicy = "Orphan"
                  forProvider = {
                    passwordSecretRef = {
                       key = "password"
                       name = oxr.spec.id + "-password"
                      namespace = oxr.spec.claimRef.namespace
                    }
                    instanceSelector.matchControllerRef = True
                  }
              }
          }, {
              apiVersion = "kubernetes.crossplane.io/v1alpha2"
              kind = "Object"
              metadata = {
                  name = oxr.spec.id + "-secret"
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = "sql-secret"
                  }
              }
              spec = {
                  references = [{
                      patchesFrom = {
                          apiVersion = "sql.gcp.upbound.io/v1beta1"
                          kind = "User"
                          name = oxr.spec.id
                          namespace = "crossplane-system"
                          fieldPath = "metadata.name"
                      }
                      toFieldPath = "stringData.username"
                  }, {
                      patchesFrom = {
                          apiVersion = "v1"
                          kind = "Secret"
                          name = oxr.spec.id + "-password"
                          namespace = oxr.spec.claimRef.namespace
                          fieldPath = "data.password"
                      }
                      toFieldPath = "data.password"
                  }, {
                      patchesFrom = {
                          apiVersion = "sql.gcp.upbound.io/v1beta1"
                          kind = "DatabaseInstance"
                          name = oxr.spec.id
                          namespace = "crossplane-system"
                          fieldPath = "status.atProvider.publicIpAddress"
                      }
                      toFieldPath = "stringData.endpoint"
                  }]
                  forProvider.manifest = {
                      apiVersion = "v1"
                      kind = "Secret"
                      metadata = {
                          name = oxr.spec.id
                          namespace = oxr.spec.claimRef.namespace
                      }
                      data.port = "NTQzMg=="
                  }
                  providerConfigRef.name = oxr.spec.id + "-sql"
              }
          }, {
              **oxr
              if "databaseinstance" in ocds:
                  status.address = ocds["databaseinstance"].Resource.status.atProvider.publicIpAddress
          }]

          items = _items
  - step: common
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: |
          oxr = option("params").oxr

          schema providerConfig:
              _apiVersion: str
              _suffix: str
              apiVersion = _apiVersion
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id + "-sql"
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-provider-config-" + _suffix
                  }
              }
              spec = {
                  credentials.source = "InjectedIdentity"
              }

          _items = [
              providerConfig {
                  _apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  _suffix = "kubernetes"
              },
              providerConfig {
                  _apiVersion = "helm.crossplane.io/v1beta1"
                  _suffix = "helm"
          }, {
              apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = "sql-config"
                      "crossplane.io/external-name" = "default"
                  }
              }
              spec = {
                  credentials = {
                    source = "PostgreSQLConnectionSecret"
                    connectionSecretRef = {
                      name = oxr.spec.id
                      namespace = oxr.spec.claimRef.namespace
                    }
                  }
                  sslMode = "require"
              }
          }]

          if oxr.spec.parameters?.databases:
              _items += [{
                  apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
                  kind = "Database"
                  metadata = {
                      name = oxr.spec.id + "-" + _database
                      annotations = {
                          "crossplane.io/external-name" = _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id
                      forProvider = {}
                      deletionPolicy = "Orphan"
                  }
              } for _database in oxr.spec.parameters.databases ]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pullRootPasswordKey:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id + "-password"
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.parameters.secrets.pullRootPasswordKey
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id + "-password"
                              }
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pushToStore:
              _endpoint = """\
          {
            "endpoint": "{{ .endpoint }}",
            "port": "{{ .port }}",
            "username": "{{ .username }}",
            "password": "{{ .password }}",
            """
              _conns = [ "\"conn-{}\": \"host=[[ .endpoint ]] user=[[ .username ]] password=[[ .password ]] port=[[ .port ]] connect_timeout=10 database={}\"".format(_db, _db).replace("[[", "{{").replace("]]", "}}") for _db in oxr.spec.parameters.databases ]
              _endpoint += ",\n  ".join(_conns)
              _endpoint += """
          }
          """
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-push-store"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-push-store"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1alpha1"
                          kind = "PushSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              deletionPolicy = "Delete"
                              refreshInterval = "1h"
                              secretStoreRefs = [{
                                  name = oxr.spec.parameters.secrets.storeName
                                  kind = "ClusterSecretStore"
                              }]
                              selector.secret.name = oxr.spec.id
                              template.data.endpoint = _endpoint
                              data = [{
                                  match = {
                                      secretKey = "endpoint"
                                      remoteRef.remoteKey = oxr.spec.id
                                  }
                              }]
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.schemas:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-schema-" + _schema.database
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-schema-" + _schema.database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "db.atlasgo.io/v1alpha1"
                          kind = "AtlasSchema"
                          metadata = {
                              name = oxr.spec.id + "-" + _schema.database
                              namespace = oxr.spec.claimRef.namespace
                          }
                          toFieldPath = "spec.credentials.connectionSecretRef.namespace"
                          spec = {
                              credentials = {
                                  scheme = "postgres"
                                  hostFrom.secretKeyRef = {
                                      key = "endpoint"
                                      name = oxr.spec.id
                                  }
                                  port = 5432
                                  userFrom.secretKeyRef = {
                                      key = "username"
                                      name = oxr.spec.id
                                  }
                                  passwordFrom.secretKeyRef = {
                                      key = "password"
                                      name = oxr.spec.id
                                  }
                                  database = _schema.database
                                  parameters.sslmode = "disable"
                              }
                              schema.sql = _schema.sql
                          }
                      }
                  }
              } for _schema in oxr.spec.parameters.schemas ]

          if oxr.spec.parameters?.secrets?.daprComponents and oxr.spec.parameters?.secrets?.pullToCluster:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-dapr-component-" + _database
                      annotations = {
                          "crossplane.io/external-name" = oxr.spec.id + "-dapr-component-" + _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-dapr-component-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider = {
                          manifest = {
                              apiVersion = "dapr.io/v1alpha1"
                              kind = "Component"
                              metadata = {
                                  name = oxr.spec.id + "-" + _database
                                  namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                              }
                              spec = {
                                  type = "state.postgresql"
                                  version = "v1"
                                  metadata = [{
                                      name = "connectionString"
                                      secretKeyRef = {
                                          name = oxr.spec.id
                                          key = "conn-" + _database
                                      }
                                  }]
                              }
                          }
                      }
                  }
              } for _database in oxr.spec.parameters.databases ]
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull-cluster"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull-cluster"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.id
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id
                              }
                          }
                      }
                  }
              }]

          items = _items
  - step: statuses
    functionRef:
      name: crossplane-contrib-function-status-transformer
    input:
      apiVersion: function-status-transformer.fn.crossplane.io/v1beta1
      kind: StatusTransformation
      statusConditionHooks:
      - matchers:
        - resources:
          - name: databaseinstance
          conditions:
          - type: Synced
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'True'
            message: So far so good
      - matchers:
        - resources:
          - name: databaseinstance
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: (.*)cannot get referenced ProviderConfig(.*)
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: ProviderConfig is missing. Contact service owner.
      - matchers:
        - resources:
          - name: databaseinstance
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: '(.*)Invalid value for region: (?P<Region>.*)., invalid(.*)'
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: Selected region {{ .Region }} is not available. Double check the `spec.parameters.region` value.
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    db: postgresql
    provider: aws
  name: aws-postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkit.live/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - step: main
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: "import models.io.upbound.aws.ec2.v1beta1 as ec2v1beta1\nimport models.io.upbound.aws.rds.v1beta1 as rdsv1beta1\nimport models.io.upbound.aws.rds.v1beta2 as rdsv1beta2\n\noxr = option(\"params\").oxr\nocds = option(\"params\").ocds\n\n_region = \"us-east-1\"\nif oxr.spec?.parameters?.region:\n    _region = oxr.spec.parameters.region\n\n_metadata = lambda resourceName: str -> any {\n    {\n        name = oxr.spec.id\n        annotations = {\n            \"krm.kcl.dev/composition-resource-name\" = resourceName\n        }\n    }\n}\n\n_items = [\n    ec2v1beta1.InternetGateway {\n        metadata = _metadata(\"gateway\")\n        spec.forProvider = {\n            region = _region\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.MainRouteTableAssociation {\n        metadata = _metadata(\"mainRouteTableAssociation\")\n        spec.forProvider = {\n            region = _region\n            routeTableIdSelector.matchControllerRef = True\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.RouteTable {\n        metadata = _metadata(\"routeTable\")\n        spec.forProvider = {\n            region = _region\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.Route {\n        metadata = _metadata(\"route\")\n        spec.forProvider = {\n            region = _region\n            routeTableIdSelector.matchControllerRef = True\n            destinationCidrBlock = \"0.0.0.0/0\"\n            gatewayIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.SecurityGroupRule {\n        metadata = _metadata(\"securityGroupRule\")\n        spec.forProvider = {\n            region = _region\n            description = \"I am too lazy to write descriptions\"\n            type = \"ingress\"\n            fromPort = 5432\n            toPort = 5432\n            protocol = \"tcp\"\n            cidrBlocks = [\"0.0.0.0/0\"]\n            securityGroupIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.SecurityGroup {\n        metadata = _metadata(\"securityGroup\")\n        spec.forProvider = {\n            region = _region\n            description = \"I am too lazy to write descriptions\"\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    ec2v1beta1.VPC {\n        metadata = _metadata(\"vpc\")\n        spec.forProvider = {\n            region = _region\n            cidrBlock = \"11.0.0.0/16\"\n            enableDnsSupport = True\n            enableDnsHostnames = True\n        }\n    },\n    rdsv1beta1.SubnetGroup {\n        metadata = _metadata(\"subnetgroup\")    \n        spec.forProvider = {\n            region = _region\n            description = \"I'm too lazy to write a good description\"\n            subnetIdSelector.matchControllerRef = True\n        }\n    },\n    rdsv1beta2.Instance {\n        metadata = _metadata(\"rdsinstance\")\n        spec.forProvider = {\n            region = _region\n            dbSubnetGroupNameSelector.matchControllerRef = True\n            vpcSecurityGroupIdSelector.matchControllerRef = True\n            username = \"masteruser\"\n            engine = \"postgres\"\n            skipFinalSnapshot = True\n            publiclyAccessible = True\n            allocatedStorage = 200\n            passwordSecretRef = {\n                name = oxr.spec.id + \"-password\"\n                namespace = oxr.spec.claimRef.namespace\n                key = \"password\"\n            }\n            identifier = oxr.spec.id\n            if oxr.spec.parameters.size == \"small\":\n                instanceClass = \"db.m5.large\"\n            elif oxr.spec.parameters.size == \"medium\":\n                instanceClass = \"db.m5.2xlarge\"\n            else:\n                instanceClass = \"db.m5.8xlarge\"\n            engineVersion = oxr.spec.parameters.version\n        }\n    }, {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n        kind = \"Object\"\n        metadata = {\n            name = oxr.spec.id + \"-secret\"\n            annotations = {\n                \"krm.kcl.dev/ready\": \"True\"\n                \"krm.kcl.dev/composition-resource-name\" = \"sql-secret\"\n            }\n        }\n        spec = {\n            references = [{\n                patchesFrom = {\n                    apiVersion = \"rds.aws.upbound.io/v1beta1\"\n                    kind = \"Instance\"\n                    name = oxr.spec.id\n                    namespace = \"crossplane-system\"\n                    fieldPath = \"spec.forProvider.username\"\n                }\n                toFieldPath = \"stringData.username\"\n            }, {\n                patchesFrom = {\n                    apiVersion = \"v1\"\n                    kind = \"Secret\"\n                    name = oxr.spec.id + \"-password\"\n                    namespace = oxr.spec.claimRef.namespace\n                    fieldPath = \"data.password\"\n                }\n                toFieldPath = \"data.password\"\n            }, {\n                patchesFrom = {\n                    apiVersion = \"rds.aws.upbound.io/v1beta1\"\n                    kind = \"Instance\"\n                    name = oxr.spec.id\n                    namespace = \"crossplane-system\"\n                    fieldPath = \"status.atProvider.address\"\n                }\n                toFieldPath = \"stringData.endpoint\"\n            }]\n            forProvider.manifest = {\n                apiVersion = \"v1\"\n                kind = \"Secret\"\n                metadata = {\n                    name = oxr.spec.id\n                    namespace = oxr.spec.claimRef.namespace\n                }\n                data.port = \"NTQzMg==\"\n            }\n            providerConfigRef.name = oxr.spec.id + \"-sql\"\n        }\n    }, {\n        **oxr\n        if \"rdsinstance\" in ocds:\n            status.address = ocds[\"rdsinstance\"].Resource.status.atProvider.address\n    }\n]\n\n_zoneList = [\n    { zone = \"a\", cidrBlock = \"11.0.0.0/24\" },\n    { zone = \"b\", cidrBlock = \"11.0.1.0/24\"  },\n    { zone = \"c\", cidrBlock = \"11.0.2.0/24\"  }\n]\n\n_items += [{\n    apiVersion = \"ec2.aws.upbound.io/v1beta1\"\n    kind = \"RouteTableAssociation\"\n    metadata = {\n        name = oxr.spec.id + \"-1\" + _data.zone\n        annotations = {\n            \"krm.kcl.dev/composition-resource-name\" = \"routeTableAssociation1\" + _data.zone\n        }\n    }\n    spec.forProvider = {\n        region = _region\n        routeTableIdSelector.matchControllerRef = True\n        subnetIdSelector = {\n            matchControllerRef = True\n            matchLabels.zone = _region + _data.zone\n        }\n    }\n} for _data in _zoneList]\n\n_items += [{\n    apiVersion = \"ec2.aws.upbound.io/v1beta1\"\n    kind = \"Subnet\"\n    metadata = {\n        name = oxr.spec.id + \"-\" + _data.zone\n        annotations = {\n            \"krm.kcl.dev/composition-resource-name\" = \"subnet-\" + _data.zone\n        }\n        labels = {\n            zone = _region + _data.zone\n        }\n    }\n    spec.forProvider = {\n        region = _region\n        availabilityZone = _region + _data.zone\n        cidrBlock = _data.cidrBlock\n        vpcIdSelector.matchControllerRef = True\n    }\n} for _data in _zoneList]\n\nitems = _items\n"
  - step: common
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: |
          oxr = option("params").oxr

          schema providerConfig:
              _apiVersion: str
              _suffix: str
              apiVersion = _apiVersion
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id + "-sql"
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-provider-config-" + _suffix
                  }
              }
              spec = {
                  credentials.source = "InjectedIdentity"
              }

          _items = [
              providerConfig {
                  _apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  _suffix = "kubernetes"
              },
              providerConfig {
                  _apiVersion = "helm.crossplane.io/v1beta1"
                  _suffix = "helm"
          }, {
              apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = "sql-config"
                      "crossplane.io/external-name" = "default"
                  }
              }
              spec = {
                  credentials = {
                    source = "PostgreSQLConnectionSecret"
                    connectionSecretRef = {
                      name = oxr.spec.id
                      namespace = oxr.spec.claimRef.namespace
                    }
                  }
                  sslMode = "require"
              }
          }]

          if oxr.spec.parameters?.databases:
              _items += [{
                  apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
                  kind = "Database"
                  metadata = {
                      name = oxr.spec.id + "-" + _database
                      annotations = {
                          "crossplane.io/external-name" = _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id
                      forProvider = {}
                      deletionPolicy = "Orphan"
                  }
              } for _database in oxr.spec.parameters.databases ]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pullRootPasswordKey:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id + "-password"
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.parameters.secrets.pullRootPasswordKey
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id + "-password"
                              }
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pushToStore:
              _endpoint = """\
          {
            "endpoint": "{{ .endpoint }}",
            "port": "{{ .port }}",
            "username": "{{ .username }}",
            "password": "{{ .password }}",
            """
              _conns = [ "\"conn-{}\": \"host=[[ .endpoint ]] user=[[ .username ]] password=[[ .password ]] port=[[ .port ]] connect_timeout=10 database={}\"".format(_db, _db).replace("[[", "{{").replace("]]", "}}") for _db in oxr.spec.parameters.databases ]
              _endpoint += ",\n  ".join(_conns)
              _endpoint += """
          }
          """
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-push-store"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-push-store"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1alpha1"
                          kind = "PushSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              deletionPolicy = "Delete"
                              refreshInterval = "1h"
                              secretStoreRefs = [{
                                  name = oxr.spec.parameters.secrets.storeName
                                  kind = "ClusterSecretStore"
                              }]
                              selector.secret.name = oxr.spec.id
                              template.data.endpoint = _endpoint
                              data = [{
                                  match = {
                                      secretKey = "endpoint"
                                      remoteRef.remoteKey = oxr.spec.id
                                  }
                              }]
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.schemas:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-schema-" + _schema.database
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-schema-" + _schema.database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "db.atlasgo.io/v1alpha1"
                          kind = "AtlasSchema"
                          metadata = {
                              name = oxr.spec.id + "-" + _schema.database
                              namespace = oxr.spec.claimRef.namespace
                          }
                          toFieldPath = "spec.credentials.connectionSecretRef.namespace"
                          spec = {
                              credentials = {
                                  scheme = "postgres"
                                  hostFrom.secretKeyRef = {
                                      key = "endpoint"
                                      name = oxr.spec.id
                                  }
                                  port = 5432
                                  userFrom.secretKeyRef = {
                                      key = "username"
                                      name = oxr.spec.id
                                  }
                                  passwordFrom.secretKeyRef = {
                                      key = "password"
                                      name = oxr.spec.id
                                  }
                                  database = _schema.database
                                  parameters.sslmode = "disable"
                              }
                              schema.sql = _schema.sql
                          }
                      }
                  }
              } for _schema in oxr.spec.parameters.schemas ]

          if oxr.spec.parameters?.secrets?.daprComponents and oxr.spec.parameters?.secrets?.pullToCluster:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-dapr-component-" + _database
                      annotations = {
                          "crossplane.io/external-name" = oxr.spec.id + "-dapr-component-" + _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-dapr-component-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider = {
                          manifest = {
                              apiVersion = "dapr.io/v1alpha1"
                              kind = "Component"
                              metadata = {
                                  name = oxr.spec.id + "-" + _database
                                  namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                              }
                              spec = {
                                  type = "state.postgresql"
                                  version = "v1"
                                  metadata = [{
                                      name = "connectionString"
                                      secretKeyRef = {
                                          name = oxr.spec.id
                                          key = "conn-" + _database
                                      }
                                  }]
                              }
                          }
                      }
                  }
              } for _database in oxr.spec.parameters.databases ]
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull-cluster"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull-cluster"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.id
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id
                              }
                          }
                      }
                  }
              }]

          items = _items
  - step: statuses
    functionRef:
      name: crossplane-contrib-function-status-transformer
    input:
      apiVersion: function-status-transformer.fn.crossplane.io/v1beta1
      kind: StatusTransformation
      statusConditionHooks:
      - matchers:
        - resources:
          - name: vpc
          conditions:
          - type: Synced
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'True'
            message: So far so good
      - matchers:
        - resources:
          - name: vpc
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: (.*)cannot get referenced ProviderConfig(.*)
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: ProviderConfig is missing. Contact service owner.
      - matchers:
        - resources:
          - name: vpc
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: '(.*)lookup sts.(?P<Region>.*).amazonaws.com on (.*): no such host(.*)'
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: Selected region {{ .Region }} is not available. Double check the `spec.parameters.region` value.
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    db: postgresql
    provider: azure
  name: azure-postgresql
spec:
  compositeTypeRef:
    apiVersion: devopstoolkit.live/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - step: main
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: |
          oxr = option("params").oxr
          ocds = option("params").ocds

          _region = "eastus"
          if oxr.spec?.parameters?.region:
              _region = oxr.spec.parameters.region

          _metadata = lambda resourceName: str -> any {
              {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/composition-resource-name" = resourceName
                  }
              }
          }

          _items = [{
              apiVersion = "azure.upbound.io/v1beta1"
              kind = "ResourceGroup"
              metadata = _metadata("resourcegroup")
              spec.forProvider.location = _region
          }, {
              apiVersion = "dbforpostgresql.azure.upbound.io/v1beta1"
              kind = "Server"
              metadata = _metadata("server")
              spec = {
                  forProvider = {
                      location = _region
                      version = oxr.spec.parameters.version
                      if oxr.spec.parameters.size == "small":
                          skuName = "B_Gen5_1"
                      elif oxr.spec.parameters.size == "medium":
                          skuName = "GP_Gen5_2"
                      else:
                          skuName = "GP_Gen5_8"
                      resourceGroupNameSelector.matchControllerRef = True
                      storageMb = 5120
                      autoGrowEnabled = True
                      sslEnforcementEnabled = False
                      sslMinimalTlsVersionEnforced = "TLSEnforcementDisabled"
                      administratorLogin = "postgres"
                      administratorLoginPasswordSecretRef = {
                          name = oxr.spec.id + "-password"
                          key = "password"
                          namespace = oxr.spec.claimRef.namespace
                      }
                      publicNetworkAccessEnabled = True
                  }
                  writeConnectionSecretToRef = {
                      name = oxr.spec.id
                      namespace = oxr.spec.claimRef.namespace
                  }
              }
          }, {
              apiVersion = "dbforpostgresql.azure.upbound.io/v1beta1"
              kind = "FirewallRule"
              metadata = _metadata("firewall-rule")
              spec.forProvider = {
                  startIpAddress = "0.0.0.0"
                  endIpAddress = "255.255.255.255"
                  resourceGroupNameSelector.matchControllerRef = True
                  serverNameSelector.matchControllerRef = True
              }
          }, {
              apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = "sql-config"
                  }
              }
              spec = {
                  credentials = {
                      source = "PostgreSQLConnectionSecret"
                      connectionSecretRef = {
                          name = oxr.spec.id
                          namespace = oxr.spec.claimRef.namespace
                      }
                  }
                  sslMode = "require"
              }
          }, {
              **oxr
              if "server" in ocds:
                  status.address = ocds["server"].Resource.status.atProvider.fqdn
          }]

          items = _items
  - step: common
    functionRef:
      name: crossplane-contrib-function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      spec:
        dependencies: models = { git = "https://github.com/vfarcic/crossplane-sql", commit = "0d41bc5fe3a8be548017f986a0320bc84d81ae25" }
        source: |
          oxr = option("params").oxr

          schema providerConfig:
              _apiVersion: str
              _suffix: str
              apiVersion = _apiVersion
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id + "-sql"
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-provider-config-" + _suffix
                  }
              }
              spec = {
                  credentials.source = "InjectedIdentity"
              }

          _items = [
              providerConfig {
                  _apiVersion = "kubernetes.crossplane.io/v1alpha1"
                  _suffix = "kubernetes"
              },
              providerConfig {
                  _apiVersion = "helm.crossplane.io/v1beta1"
                  _suffix = "helm"
          }, {
              apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
              kind = "ProviderConfig"
              metadata = {
                  name = oxr.spec.id
                  annotations = {
                      "krm.kcl.dev/ready": "True"
                      "krm.kcl.dev/composition-resource-name" = "sql-config"
                      "crossplane.io/external-name" = "default"
                  }
              }
              spec = {
                  credentials = {
                    source = "PostgreSQLConnectionSecret"
                    connectionSecretRef = {
                      name = oxr.spec.id
                      namespace = oxr.spec.claimRef.namespace
                    }
                  }
                  sslMode = "require"
              }
          }]

          if oxr.spec.parameters?.databases:
              _items += [{
                  apiVersion = "postgresql.sql.crossplane.io/v1alpha1"
                  kind = "Database"
                  metadata = {
                      name = oxr.spec.id + "-" + _database
                      annotations = {
                          "crossplane.io/external-name" = _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id
                      forProvider = {}
                      deletionPolicy = "Orphan"
                  }
              } for _database in oxr.spec.parameters.databases ]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pullRootPasswordKey:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id + "-password"
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.parameters.secrets.pullRootPasswordKey
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id + "-password"
                              }
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.secrets?.storeName and oxr.spec.parameters?.secrets?.pushToStore:
              _endpoint = """\
          {
            "endpoint": "{{ .endpoint }}",
            "port": "{{ .port }}",
            "username": "{{ .username }}",
            "password": "{{ .password }}",
            """
              _conns = [ "\"conn-{}\": \"host=[[ .endpoint ]] user=[[ .username ]] password=[[ .password ]] port=[[ .port ]] connect_timeout=10 database={}\"".format(_db, _db).replace("[[", "{{").replace("]]", "}}") for _db in oxr.spec.parameters.databases ]
              _endpoint += ",\n  ".join(_conns)
              _endpoint += """
          }
          """
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-push-store"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-push-store"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1alpha1"
                          kind = "PushSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace: oxr.spec.claimRef.namespace
                          }
                          spec = {
                              deletionPolicy = "Delete"
                              refreshInterval = "1h"
                              secretStoreRefs = [{
                                  name = oxr.spec.parameters.secrets.storeName
                                  kind = "ClusterSecretStore"
                              }]
                              selector.secret.name = oxr.spec.id
                              template.data.endpoint = _endpoint
                              data = [{
                                  match = {
                                      secretKey = "endpoint"
                                      remoteRef.remoteKey = oxr.spec.id
                                  }
                              }]
                          }
                      }
                  }
              }]

          if oxr.spec.parameters?.schemas:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-schema-" + _schema.database
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-schema-" + _schema.database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.id + "-sql"
                      forProvider.manifest = {
                          apiVersion = "db.atlasgo.io/v1alpha1"
                          kind = "AtlasSchema"
                          metadata = {
                              name = oxr.spec.id + "-" + _schema.database
                              namespace = oxr.spec.claimRef.namespace
                          }
                          toFieldPath = "spec.credentials.connectionSecretRef.namespace"
                          spec = {
                              credentials = {
                                  scheme = "postgres"
                                  hostFrom.secretKeyRef = {
                                      key = "endpoint"
                                      name = oxr.spec.id
                                  }
                                  port = 5432
                                  userFrom.secretKeyRef = {
                                      key = "username"
                                      name = oxr.spec.id
                                  }
                                  passwordFrom.secretKeyRef = {
                                      key = "password"
                                      name = oxr.spec.id
                                  }
                                  database = _schema.database
                                  parameters.sslmode = "disable"
                              }
                              schema.sql = _schema.sql
                          }
                      }
                  }
              } for _schema in oxr.spec.parameters.schemas ]

          if oxr.spec.parameters?.secrets?.daprComponents and oxr.spec.parameters?.secrets?.pullToCluster:
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-dapr-component-" + _database
                      annotations = {
                          "crossplane.io/external-name" = oxr.spec.id + "-dapr-component-" + _database
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-dapr-component-" + _database
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider = {
                          manifest = {
                              apiVersion = "dapr.io/v1alpha1"
                              kind = "Component"
                              metadata = {
                                  name = oxr.spec.id + "-" + _database
                                  namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                              }
                              spec = {
                                  type = "state.postgresql"
                                  version = "v1"
                                  metadata = [{
                                      name = "connectionString"
                                      secretKeyRef = {
                                          name = oxr.spec.id
                                          key = "conn-" + _database
                                      }
                                  }]
                              }
                          }
                      }
                  }
              } for _database in oxr.spec.parameters.databases ]
              _items += [{
                  apiVersion = "kubernetes.crossplane.io/v1alpha2"
                  kind = "Object"
                  metadata = {
                      name = oxr.spec.id + "-secret-pull-cluster"
                      annotations = {
                          "krm.kcl.dev/composition-resource-name" = oxr.spec.id + "-secret-pull-cluster"
                      }
                  }
                  spec = {
                      providerConfigRef.name = oxr.spec.parameters.secrets.pullToCluster
                      forProvider.manifest = {
                          apiVersion = "external-secrets.io/v1beta1"
                          kind = "ExternalSecret"
                          metadata = {
                              name = oxr.spec.id
                              namespace = oxr.spec.parameters.secrets.pullToClusterNamespace
                          }
                          spec = {
                              dataFrom = [{
                                  extract = {
                                      conversionStrategy = "Default"
                                      decodingStrategy = "None"
                                      key = oxr.spec.id
                                      metadataPolicy = "None"
                                  }
                              }]
                              refreshInterval = "1h"
                              secretStoreRef = {
                                  kind = "ClusterSecretStore"
                                  name = oxr.spec.parameters.secrets.storeName
                              }
                              target = {
                                  creationPolicy = "Owner"
                                  deletionPolicy = "Retain"
                                  name = oxr.spec.id
                              }
                          }
                      }
                  }
              }]

          items = _items
  - step: statuses
    functionRef:
      name: crossplane-contrib-function-status-transformer
    input:
      apiVersion: function-status-transformer.fn.crossplane.io/v1beta1
      kind: StatusTransformation
      statusConditionHooks:
      - matchers:
        - resources:
          - name: resourcegroup
          conditions:
          - type: Synced
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'True'
            message: So far so good
      - matchers:
        - resources:
          - name: resourcegroup
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: (.*)cannot get referenced ProviderConfig(.*)
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: ProviderConfig is missing. Contact service owner.
      - matchers:
        - resources:
          - name: resourcegroup
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: (.*)The specified location '(?P<Region>.*)' is invalid(.*)
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: Selected region {{ .Region }} is not available. Double check the `spec.parameters.region` value.
      - matchers:
        - resources:
          - name: resourcegroup
          conditions:
          - type: Synced
            status: 'False'
            reason: ReconcileError
            message: (.*)The provided location '(?P<Region>.*)' is not available for resource group(.*)
        setConditions:
        - target: CompositeAndClaim
          force: true
          condition:
            type: Developer
            status: 'False'
            reason: FailedToConnect
            message: Selected region {{ .Region }} is not available. Double check the `spec.parameters.region` value.
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
  writeConnectionSecretsToNamespace: crossplane-system
