"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Release:
    r"""
    A Release is an example API type

    Attributes
    ----------
    apiVersion : str, default is "helm.crossplane.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Release", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : HelmCrossplaneIoV1beta1ReleaseSpec, default is Undefined, required
        spec
    status : HelmCrossplaneIoV1beta1ReleaseStatus, default is Undefined, optional
        status
    """


    apiVersion: "helm.crossplane.io/v1beta1" = "helm.crossplane.io/v1beta1"

    kind: "Release" = "Release"

    metadata?: v1.ObjectMeta

    spec: HelmCrossplaneIoV1beta1ReleaseSpec

    status?: HelmCrossplaneIoV1beta1ReleaseStatus


schema HelmCrossplaneIoV1beta1ReleaseSpec:
    r"""
    A ReleaseSpec defines the desired state of a Release.

    Attributes
    ----------
    connectionDetails : [HelmCrossplaneIoV1beta1ReleaseSpecConnectionDetailsItems0], default is Undefined, optional
        connection details
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : HelmCrossplaneIoV1beta1ReleaseSpecForProvider, default is Undefined, required
        for provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    rollbackLimit : int, default is Undefined, optional
        RollbackRetriesLimit is max number of attempts to retry Helm deployment by rolling back the release.
    writeConnectionSecretToRef : HelmCrossplaneIoV1beta1ReleaseSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    connectionDetails?: [HelmCrossplaneIoV1beta1ReleaseSpecConnectionDetailsItems0]

    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: HelmCrossplaneIoV1beta1ReleaseSpecForProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRef

    publishConnectionDetailsTo?: HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsTo

    rollbackLimit?: int

    writeConnectionSecretToRef?: HelmCrossplaneIoV1beta1ReleaseSpecWriteConnectionSecretToRef


schema HelmCrossplaneIoV1beta1ReleaseSpecConnectionDetailsItems0:
    r"""
    ConnectionDetail todo

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    skipPartOfReleaseCheck : bool, default is Undefined, optional
        SkipPartOfReleaseCheck skips check for meta.helm.sh/release-name annotation.
    toConnectionSecretKey : str, default is Undefined, optional
        to connection secret key
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    skipPartOfReleaseCheck?: bool

    toConnectionSecretKey?: str

    uid?: str


schema HelmCrossplaneIoV1beta1ReleaseSpecForProvider:
    r"""
    ReleaseParameters are the configurable fields of a Release.

    Attributes
    ----------
    chart : HelmCrossplaneIoV1beta1ReleaseSpecForProviderChart, default is Undefined, required
        chart
    insecureSkipTLSVerify : bool, default is Undefined, optional
        InsecureSkipTLSVerify skips tls certificate checks for the chart download
    namespace : str, default is Undefined, required
        Namespace to install the release into.
    patchesFrom : [HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0], default is Undefined, optional
        PatchesFrom describe patches to be applied to the rendered manifests.
    set : [HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0], default is Undefined, optional
        set
    skipCRDs : bool, default is Undefined, optional
        SkipCRDs skips installation of CRDs for the release.
    skipCreateNamespace : bool, default is Undefined, optional
        SkipCreateNamespace won't create the namespace for the release. This requires the namespace to already exist.
    values : any, default is Undefined, optional
        values
    valuesFrom : [HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0], default is Undefined, optional
        values from
    wait : bool, default is Undefined, optional
        Wait for the release to become ready.
    waitTimeout : str, default is Undefined, optional
        WaitTimeout is the duration Helm will wait for the release to become
        ready. Only applies if wait is also set. Defaults to 5m.
    """


    chart: HelmCrossplaneIoV1beta1ReleaseSpecForProviderChart

    insecureSkipTLSVerify?: bool

    namespace: str

    patchesFrom?: [HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0]

    set?: [HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0]

    skipCRDs?: bool

    skipCreateNamespace?: bool

    values?: any

    valuesFrom?: [HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0]

    wait?: bool

    waitTimeout?: str


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderChart:
    r"""
    A ChartSpec defines the chart spec for a Release

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of Helm chart, required if ChartSpec.URL not set
    pullSecretRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderChartPullSecretRef, default is Undefined, optional
        pull secret ref
    repository : str, default is Undefined, optional
        Repository: Helm repository URL, required if ChartSpec.URL not set
    url : str, default is Undefined, optional
        URL to chart package (typically .tgz), optional and overrides others fields in the spec
    version : str, default is Undefined, optional
        Version of Helm chart, late initialized with latest version if not set
    """


    name?: str

    pullSecretRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderChartPullSecretRef

    repository?: str

    url?: str

    version?: str


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderChartPullSecretRef:
    r"""
    PullSecretRef is reference to the secret containing credentials to helm repository

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0:
    r"""
    ValueFromSource represents source of a value

    Attributes
    ----------
    configMapKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0ConfigMapKeyRef, default is Undefined, optional
        config map key ref
    secretKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0SecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0ConfigMapKeyRef

    secretKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0SecretKeyRef


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0ConfigMapKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderPatchesFromItems0SecretKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0:
    r"""
    SetVal represents a "set" value override in a Release

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : str, default is Undefined, optional
        value
    valueFrom : HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFrom


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFrom:
    r"""
    ValueFromSource represents source of a value

    Attributes
    ----------
    configMapKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    secretKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromConfigMapKeyRef

    secretKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromSecretKeyRef


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromConfigMapKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderSetItems0ValueFromSecretKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0:
    r"""
    ValueFromSource represents source of a value

    Attributes
    ----------
    configMapKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0ConfigMapKeyRef, default is Undefined, optional
        config map key ref
    secretKeyRef : HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0SecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0ConfigMapKeyRef

    secretKeyRef?: HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0SecretKeyRef


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0ConfigMapKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecForProviderValuesFromItems0SecretKeyRef:
    r"""
    DataKeySelector defines required spec to access a key of a configmap or secret

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, required
        namespace
    optional : bool, default is Undefined, optional
        optional
    """


    key?: str

    name: str

    namespace: str

    optional?: bool


schema HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRefPolicy


schema HelmCrossplaneIoV1beta1ReleaseSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRef

    metadata?: HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToMetadata

    name: str


schema HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRefPolicy


schema HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema HelmCrossplaneIoV1beta1ReleaseSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema HelmCrossplaneIoV1beta1ReleaseSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema HelmCrossplaneIoV1beta1ReleaseStatus:
    r"""
    A ReleaseStatus represents the observed state of a Release.

    Attributes
    ----------
    atProvider : HelmCrossplaneIoV1beta1ReleaseStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [HelmCrossplaneIoV1beta1ReleaseStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    failed : int, default is Undefined, optional
        failed
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    patchesSha : str, default is Undefined, optional
        patches sha
    synced : bool, default is Undefined, optional
        synced
    """


    atProvider?: HelmCrossplaneIoV1beta1ReleaseStatusAtProvider

    conditions?: [HelmCrossplaneIoV1beta1ReleaseStatusConditionsItems0]

    failed?: int

    observedGeneration?: int

    patchesSha?: str

    synced?: bool


schema HelmCrossplaneIoV1beta1ReleaseStatusAtProvider:
    r"""
    ReleaseObservation are the observable fields of a Release.

    Attributes
    ----------
    releaseDescription : str, default is Undefined, optional
        release description
    revision : int, default is Undefined, optional
        revision
    state : str, default is Undefined, optional
        Status is the status of a release
    """


    releaseDescription?: str

    revision?: int

    state?: str


schema HelmCrossplaneIoV1beta1ReleaseStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


