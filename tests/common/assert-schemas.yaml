---
apiVersion: devopstoolkit.live/v1alpha1
kind: SQL
metadata:
  labels:
    crossplane.io/claim-name: my-db
spec:
  parameters:
    schemas:
      - database: db-01
        sql: |
          create table videos (
            id varchar(50) not null,
            description text,
            primary key (id)
          );
          create table comments (
            id serial,
            video_id varchar(50) not null,
            description text not null,
            primary key (id),
            CONSTRAINT fk_videos FOREIGN KEY(video_id) REFERENCES videos(id)
          );
      - database: db-02
        sql: |
          create table videos (
            id varchar(50) not null,
            description text,
            primary key (id)
          );
  (resourceRefs[?name == join('-', ['my-db', $hyperscaler, 'schema-db-01'])]):
  - apiVersion: kubernetes.crossplane.io/v1alpha2
    kind: Object
  (resourceRefs[?name == join('-', ['my-db', $hyperscaler, 'schema-db-02'])]):
  - apiVersion: kubernetes.crossplane.io/v1alpha2
    kind: Object
---
apiVersion: kubernetes.crossplane.io/v1alpha2
kind: Object
metadata:
  annotations:
    crossplane.io/composition-resource-name: (join('-', ['my-db', $hyperscaler, 'schema-db-01']))
    crossplane.io/external-name: (join('-', ['my-db', $hyperscaler, 'schema-db-01']))
  labels:
    crossplane.io/claim-name: my-db
  name: (join('-', ['my-db', $hyperscaler, 'schema-db-01']))
  ownerReferences:
  - apiVersion: devopstoolkit.live/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: SQL
spec:
  deletionPolicy: Delete
  forProvider:
    manifest:
      apiVersion: db.atlasgo.io/v1alpha1
      kind: AtlasSchema
      metadata:
        name: (join('-', ['my-db', $hyperscaler, 'db-01']))
      spec:
        credentials:
          database: db-01
          hostFrom:
            secretKeyRef:
              key: endpoint
              name: (join('-', ['my-db', $hyperscaler]))
          parameters:
            # sslmode: disable
            sslmode: require
          passwordFrom:
            secretKeyRef:
              key: password
              name: (join('-', ['my-db', $hyperscaler]))
          port: 5432
          scheme: postgres
          userFrom:
            secretKeyRef:
              key: username
              name: (join('-', ['my-db', $hyperscaler]))
        schema:
          sql: |-
            create table videos (
              id varchar(50) not null,
              description text,
              primary key (id)
            );
            create table comments (
              id serial,
              video_id varchar(50) not null,
              description text not null,
              primary key (id),
              CONSTRAINT fk_videos FOREIGN KEY(video_id) REFERENCES videos(id)
            );
  managementPolicies:
  - '*'
  providerConfigRef:
    name: (join('-', ['my-db', $hyperscaler, 'sql']))
---
apiVersion: kubernetes.crossplane.io/v1alpha2
kind: Object
metadata:
  annotations:
    crossplane.io/composition-resource-name: (join('-', ['my-db', $hyperscaler, 'schema-db-02']))
    crossplane.io/external-name: (join('-', ['my-db', $hyperscaler, 'schema-db-02']))
  labels:
    crossplane.io/claim-name: my-db
  name: (join('-', ['my-db', $hyperscaler, 'schema-db-02']))
  ownerReferences:
  - apiVersion: devopstoolkit.live/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: SQL
spec:
  deletionPolicy: Delete
  forProvider:
    manifest:
      apiVersion: db.atlasgo.io/v1alpha1
      kind: AtlasSchema
      metadata:
        name: (join('-', ['my-db', $hyperscaler, 'db-02']))
      spec:
        credentials:
          database: db-02
          hostFrom:
            secretKeyRef:
              key: endpoint
              name: (join('-', ['my-db', $hyperscaler]))
          parameters:
            # sslmode: disable
            sslmode: require
          passwordFrom:
            secretKeyRef:
              key: password
              name: (join('-', ['my-db', $hyperscaler]))
          port: 5432
          scheme: postgres
          userFrom:
            secretKeyRef:
              key: username
              name: (join('-', ['my-db', $hyperscaler]))
        schema:
          sql: |
            create table videos (
              id varchar(50) not null,
              description text,
              primary key (id)
            );
  managementPolicies:
  - '*'
  providerConfigRef:
    name: (join('-', ['my-db', $hyperscaler, 'sql']))
