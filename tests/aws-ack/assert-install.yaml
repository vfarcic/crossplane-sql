---
apiVersion: devopstoolkit.live/v1beta1
kind: SQL
metadata:
  name: my-db-aws-ack
spec:
  size: medium
  version: "13.4"
  crossplane:
    compositionRef:
      name: aws-ack-postgresql
    compositionSelector:
      matchLabels:
        db: postgresql
        provider: aws-ack
    compositionUpdatePolicy: Automatic
    resourceRefs:
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: InternetGateway
      name: my-db-aws-ack
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      name: my-db-aws-ack
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: SecurityGroup
      name: my-db-aws-ack
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      name: my-db-aws-ack-a
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      name: my-db-aws-ack-b
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      name: my-db-aws-ack-c
    - apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: VPC
      name: my-db-aws-ack
    - apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      name: my-db-aws-ack-sql
    - apiVersion: kubernetes.crossplane.io/v1alpha2
      kind: Object
      name: my-db-aws-ack-secret
    - apiVersion: postgresql.sql.crossplane.io/v1alpha1
      kind: ProviderConfig
      name: my-db-aws-ack
    - apiVersion: rds.services.k8s.aws/v1alpha1
      kind: DBInstance
      name: my-db-aws-ack
    - apiVersion: rds.services.k8s.aws/v1alpha1
      kind: DBSubnetGroup
      name: my-db-aws-ack
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: VPC
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  cidrBlocks:
    - "11.0.0.0/16"
  enableDNSSupport: true
  enableDNSHostnames: true
  tags:
    - key: name
      value: my-db-aws-ack
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: InternetGateway
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  vpcRef:
    from:
      name: my-db-aws-ack
  tags:
    - key: name
      value: my-db-aws-ack
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: RouteTable
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  vpcRef:
    from:
      name: my-db-aws-ack
  # associations:
  #   main: true
  routes:
    - destinationCIDRBlock: "0.0.0.0/0"
      gatewayRef:
        from:
          name: my-db-aws-ack
  tags:
    - key: name
      value: my-db-aws-ack
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: SecurityGroup
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  name: my-db-aws-ack
  description: I am too lazy to write descriptions
  vpcRef:
    from:
      name: my-db-aws-ack
  ingressRules:
    - fromPort: 5432
      toPort: 5432
      ipProtocol: tcp
      ipRanges:
        - cidrIP: "0.0.0.0/0"
          description: I am too lazy to write descriptions
  tags:
    - key: name
      value: my-db-aws-ack
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: Subnet
metadata:
  name: my-db-aws-ack-a
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  availabilityZone: us-east-1a
  cidrBlock: "11.0.0.0/24"
  vpcRef:
    from:
      name: my-db-aws-ack
  routeTableRefs:
    - from:
        name: my-db-aws-ack
  tags:
    - key: name
      value: my-db-aws-ack
    - key: zone
      value: us-east-1a
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: Subnet
metadata:
  name: my-db-aws-ack-b
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  availabilityZone: us-east-1b
  cidrBlock: "11.0.1.0/24"
  vpcRef:
    from:
      name: my-db-aws-ack
  routeTableRefs:
    - from:
        name: my-db-aws-ack
  tags:
    - key: name
      value: my-db-aws-ack
    - key: zone
      value: us-east-1b
---
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: Subnet
metadata:
  name: my-db-aws-ack-c
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  availabilityZone: us-east-1c
  cidrBlock: "11.0.2.0/24"
  vpcRef:
    from:
      name: my-db-aws-ack
  routeTableRefs:
    - from:
        name: my-db-aws-ack
  tags:
    - key: name
      value: my-db-aws-ack
    - key: zone
      value: us-east-1c
---
apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBSubnetGroup
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  name: my-db-aws-ack
  description: I am too lazy to write descriptions
  subnetRefs:
    - from:
        name: my-db-aws-ack-a
    - from:
        name: my-db-aws-ack-b
    - from:
        name: my-db-aws-ack-c
---
apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBInstance
metadata:
  name: my-db-aws-ack
  namespace: ($namespace)
  annotations:
    services.k8s.aws/region: us-east-1
spec:
  dbSubnetGroupRef:
    from:
      name: my-db-aws-ack
  vpcSecurityGroupRefs:
    - from:
        name: my-db-aws-ack
  masterUsername: masteruser
  engine: postgres
  # skipFinalSnapshot: true
  publiclyAccessible: true
  allocatedStorage: 200
  masterUserPassword:
    key: password
    name: my-db-aws-ack-password
  storageEncrypted: true
  dbInstanceIdentifier: my-db-aws-ack
  dbInstanceClass: db.m5.2xlarge
  engineVersion: "13.4"
---
apiVersion: kubernetes.crossplane.io/v1alpha2
kind: Object
metadata:
  name: my-db-aws-ack-secret
spec:
  deletionPolicy: Delete
  forProvider:
    manifest:
      apiVersion: v1
      kind: Secret
      metadata:
        name: my-db-aws-ack
      data:
        port: NTQzMg==
  managementPolicies:
  - '*'
  providerConfigRef:
    name: my-db-aws-ack-sql
  readiness:
    policy: SuccessfulCreate
  references:
  - patchesFrom:
      apiVersion: rds.services.k8s.aws/v1alpha1
      fieldPath: spec.masterUsername
      kind: DBInstance
      name: my-db-aws-ack
      namespace: ($namespace)
    toFieldPath: stringData.username
  - patchesFrom:
      apiVersion: v1
      fieldPath: data.password
      kind: Secret
      name: my-db-aws-ack-password
    toFieldPath: data.password
  - patchesFrom:
      apiVersion: rds.services.k8s.aws/v1alpha1
      fieldPath: status.endpoint.address
      kind: DBInstance
      name: my-db-aws-ack
      namespace: ($namespace)
    toFieldPath: stringData.endpoint
