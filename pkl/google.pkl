import "providerConfigSql.pkl"
import "providerConfigKubernetes.pkl"
import "providerConfigHelm.pkl"
import "secretSql.pkl"
import "sqlDb.pkl"
import "schema.pkl"
import "secretPull.pkl"
import "secretPush.pkl"
import "secretPullCluster.pkl"
import "daprComponents.pkl"
import "dynatrace.pkl"
import "autoReady.pkl"

apiVersion = "apiextensions.crossplane.io/v1"
kind       = "Composition"
metadata {
    name = "google-postgresql"
    labels {
        provider = "google"
        db       = "postgresql"
    }
}
spec {
    compositeTypeRef {
        apiVersion = "devopstoolkitseries.com/v1alpha1"
        kind       = "SQL"
    }
    mode = "Pipeline"
    pipeline {
        new {
            functionRef { name = "crossplane-contrib-function-patch-and-transform" }
            step = "patch-and-transform"
            input {
                apiVersion = "pt.fn.crossplane.io/v1beta1"
                kind       = "Resources"
                patchSets {
                    new {
                        name = "metadata"
                        patches {
                            new {
                                fromFieldPath = "metadata.annotations"
                                toFieldPath   = "metadata.annotations"
                            }
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "metadata.name"
                            }
                        }
                    }
                }
                resources {
                    default {
                        base {
                            apiVersion = "sql.gcp.upbound.io/v1beta1"
                        }
                        patches { new {
                            type = "PatchSet"
                            patchSetName = "metadata"
                        } }
                    }
                    new {
                        name = "sql"
                        base {
                            kind = "DatabaseInstance"
                            spec { forProvider {
                                region = "us-east1"
                                rootPasswordSecretRef {
                                    namespace = "crossplane-system"
                                    key       = "password"
                                }
                                settings { new {
                                    availabilityType = "REGIONAL"
                                    backupConfiguration { new {
                                        enabled          = true
                                        binaryLogEnabled = false
                                    } }
                                    ipConfiguration { new {
                                        ipv4Enabled = true
                                        authorizedNetworks { new {
                                            name  = "all"
                                            value = "0.0.0.0/0" 
                                        }}
                                    } }
                                } }
                                deletionProtection = false
                            } }
                        }
                        patches {
                            new {
                                fromFieldPath = "spec.parameters.version"
                                toFieldPath   = "spec.forProvider.databaseVersion"
                                transforms { new {
                                    type = "string"
                                    string {
                                        fmt = "POSTGRES_%s"
                                        type = "Format"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.parameters.size"
                                toFieldPath   = "spec.forProvider.settings[0].tier"
                                transforms { new {
                                    type = "map"
                                    map {
                                        small  = "db-custom-1-3840"
                                        medium = "db-custom-16-61440"
                                        large  = "db-custom-64-245760"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "spec.forProvider.rootPasswordSecretRef.name"
                                transforms { new {
                                    type = "string"
                                    string {
                                        fmt = "%s-password"
                                        type = "Format"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.claimRef.namespace"
                                toFieldPath   = "spec.forProvider.rootPasswordSecretRef.namespace"
                            }
                            new {
                                type          = "ToCompositeFieldPath"
                                fromFieldPath = "status.atProvider.publicIpAddress"
                                toFieldPath   = "status.address"
                            }
                        }
                    }
                    new {
                        name = "user"
                        base {
                            kind = "User"
                            spec {
                                deletionPolicy = "Orphan"
                                forProvider {
                                    passwordSecretRef { key = "password" }
                                    instanceSelector { matchControllerRef = true }
                                }
                            }
                        }
                        patches {
                            new {
                                fromFieldPath = "spec.id"
                                toFieldPath   = "spec.forProvider.passwordSecretRef.name"
                                transforms { new {
                                    type = "string"
                                    string {
                                        fmt = "%s-password"
                                        type = "Format"
                                    }
                                } }
                            }
                            new {
                                fromFieldPath = "spec.claimRef.namespace"
                                toFieldPath   = "spec.forProvider.passwordSecretRef.namespace"
                            }
                        }
                    }
                    (providerConfigSql)
                    (providerConfigKubernetes)
                    (providerConfigHelm)
                    (secretSql) {
                        userFromApi     = "sql.gcp.upbound.io/v1beta1"
                        userFromKind    = "User"
                        addressFromApi  = "sql.gcp.upbound.io/v1beta1"
                        addressFromKind = "DatabaseInstance"
                        addressFromPath = "status.atProvider.publicIpAddress"
                    }
                }
            }
        }
        (sqlDb)
        (schema)
        (secretPull)
        (secretPush)
        (secretPullCluster)
        (daprComponents)
        (dynatrace)
        (autoReady)
    }
}