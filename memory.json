{"type":"entity","name":"Documentation Instruction","entityType":"Instruction","observations":["Always use context7 MCP server to find latest information from docs"]}
{"type":"entity","name":"Project Overview","entityType":"Information","observations":["The project is Crossplane SQL - a configuration package for creating and provisioning PostgreSQL databases across multiple cloud providers","Supported cloud providers include AWS, Google Cloud Platform, Azure, UpCloud, and local in-cluster CloudNativePG","The project provides a consistent SQL custom resource interface that abstracts away provider-specific details","The repository is structured with KCL-based compositions that define how resources are created for each provider"]}
{"type":"entity","name":"SQL Custom Resource","entityType":"Component","observations":["Defined in package/definition.yaml as a CompositeResourceDefinition (XRD)","Provides options for PostgreSQL version, instance size, region, databases, and schemas","Supports creating multiple databases and applying schemas with custom SQL","Can integrate with External Secrets Operator for secret management"]}
{"type":"entity","name":"Architecture","entityType":"Information","observations":["Uses Crossplane's composition pipeline mode with the function-kcl plugin","Implementations for each provider include database instance provisioning, database creation, schema management, and secret management","Configuration is structured using KCL files in the kcl/ directory","Compositions are defined in package/compositions.yaml"]}
{"type":"entity","name":"Setup Process","entityType":"Process","observations":["Requires a Kubernetes cluster and Crossplane v2+","Uses devbox for environment setup","Setup process includes installing Crossplane and providers, applying configurations","Uses dot.nu script for automation of setup, testing, and publishing"]}
{"type":"entity","name":"Cloud Providers","entityType":"Component","observations":["AWS: Implemented using both standard Crossplane provider and AWS Controllers for Kubernetes (ACK)","Azure: Implemented using both standard Crossplane provider and Azure Service Operator (ASO)","Google Cloud Platform: Implemented using standard Crossplane provider","UpCloud: Implemented using standard Crossplane provider","CloudNativePG: Local in-cluster implementation"]}
{"type":"entity","name":"Nushell Commands","entityType":"Instruction","observations":["Always check whether there is already a Nushell command to accomplish something before suggesting alternatives"]}
{"type":"entity","name":"Nushell Operations","entityType":"Commands","observations":["Setup: `./dot.nu setup [--preview] [--apply_irsa] [--apply_azure_creds] [--provider]` - Sets up a local cluster with Crossplane and required components","Package Apply: `./dot.nu package apply` - Generates and applies package definition.yaml and compositions.yaml","Test Full: `./dot.nu test full` - Runs setup with preview mode and tests all provider directories","Test Once: `./dot.nu test once [--dir=tests]` - Applies package and runs tests on specified directory","Test Watch: `./dot.nu test watch [--dir=tests]` - Watches for changes in KCL and tests directories and runs tests","Destroy: `./dot.nu destroy [--provider=kind]` - Destroys the created Kubernetes cluster","Publish: `./dot.nu publish [--version]` - Builds and publishes the package to Upbound registry","Create Diagram: `./dot.nu create diagram <composite_resource>` - Creates a diagram for the specified composite resource","Apply Service: `./dot.nu apply service` - Applies a service based on a prompt","Observe Service: `./dot.nu observe service` - Observes a service based on a prompt"]}
{"type":"entity","name":"Command Execution","entityType":"Instruction","observations":["All commands related to this project should be executed through `devbox run`","`source .env` should be executed always together with whichever other command you are executing","There is no need to use `bash` when executing `devbox run`"]}
{"type":"entity","name":"Build and Development Commands","entityType":"Instructions","observations":["Setup: `./dot.nu setup --preview true`","Package generate: `./dot.nu package generate` (generates YAML from KCL)","Test: `./dot.nu test full` (run all tests)","Test specific provider: `./dot.nu test watch --dir tests/aws` (watch mode)","Teardown: `./dot.nu destroy`","Publish: `./dot.nu publish --version [version]`","Set the timeout for executing Bash commands to 10 minutes","Always execute `source .env` before executing any command","Generate diagram: `./dot.nu generate diagram [composite_resource]`"]}
{"type":"entity","name":"Code Style Guidelines","entityType":"Instructions","observations":["KCL files (.k): Use consistent indentation (2 spaces)","Follow existing file structure patterns for new compositions","Provider-specific implementations should be in dedicated files","Type definitions should be explicit where possible","Maintain consistent naming patterns across providers","Error handling: Follow established pattern with annotations and status reporting","Always update examples when adding new features"]}
{"type":"entity","name":"Testing","entityType":"Instructions","observations":["Use chainsaw test files in tests/ directory","Each provider has dedicated test directory","Tests run with `./dot.nu test watch --dir tests/[provider]`"]}
{"type":"entity","name":"File Operations","entityType":"Instructions","observations":["When asked to show or get files, open them in VS Code using `code` command","When asked to get or fetch a command use `pbcopy` to copy the command to memory","When asked to add a DevBox package, always use a specific latest version. Use `devbox search` and `devbox info` commands to find out which version to use."]}